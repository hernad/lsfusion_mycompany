MODULE ManufacturingOrderBulkCreate;

REQUIRE ManufacturingOrderFilter, InvLedger;

NAMESPACE Manufacturing;

toProduce 'Produce' = DATA LOCAL NUMERIC[16,3] (Item);

dataProduceBom = DATA LOCAL Bom (Item);
produceBom (Item i) = OVERRIDE dataProduceBom(i), defaultBom(i);

nameProduceBom 'Specification' (Item i) = name(produceBom(i));

changeProduceBom (Item i) {
    DIALOG dialogItemBoms OBJECTS i = i, b = produceBom(i) INPUT NULL DO {
        dataProduceBom(i) <- b;
    }
}

FORM inputProduceQuantity 'Product selection'
    OBJECTS i = Item
    PROPERTIES(i) READONLY name, nameUom, id, idBarCode
    PROPERTIES(i) toProduce
    
    PROPERTIES(i) nameProduceBom BACKGROUND dataProduceBom(i) ON CHANGE changeProduceBom(i)
    
    FILTERS defaultBom(i)
    
    FILTERGROUP toProduce
        FILTER 'Produce' toProduce(i)
;

// products
onHandProducts 'The remainder' = onHand(productsLocation(), i);

fillNegative 'Close flow' () {
    toProduce(Item i) <- -onHandProducts(i) WHERE [FILTER inputProduceQuantity.i](i) AND onHandProducts(i) < 0; 
}

EXTEND FORM inputProduceQuantity
    PROPERTIES() nameProductsLocation,
                 fillNegative DRAW i TOOLBAR 
    
    PROPERTIES READONLY onHandProducts(i) BEFORE toProduce(i) SHOWIF productsLocation()
;

// bulk create

bulkCreate 'Create orders' () {
    IF NOT type() THEN {
        MESSAGE 'No manufacturing order type selected';
        RETURN;
    }
    
    DIALOG inputProduceQuantity DOCKED DO {
        NEWSESSION NESTED (toProduce[Item]){
            FOR toProduce(Item i) DO NEW o = ManufacturingOrder {
                type(o) <- type();
                item(o) <- i;
                bom(o) <- produceBom(i);
                materialsLocation(o) <- materialsLocation();
                productsLocation(o) <- productsLocation();
                fillByQuantity(o, toProduce(i));
            }
            APPLY;
        }
    }
}

EXTEND FORM manufacturingOrders
    PROPERTIES() bulkCreate
;

DESIGN manufacturingOrders {
    actions {
        MOVE PROPERTY(bulkCreate()) { alignment = STRETCH; }
    }
}