MODULE ManufacturingOrder;

REQUIRE Doc, MetaNumerator, Input, DateUtils, 
        BomNested, LocationEmployee,
        ManufacturingOrderType, ManufacturingSettings;

NAMESPACE Manufacturing;

CLASS ManufacturingOrder 'Manufacturing Order';

@defineDocStatus(manufacturingOrder, 'Manufacturing Order');

type 'Type' = DATA ManufacturingOrderType (ManufacturingOrder) NONULL;
nameType 'Type' (ManufacturingOrder o) = name(type(o));

WHEN LOCAL SET(ManufacturingOrder o IS ManufacturingOrder) AND NOT CHANGED(type(o)) DO type(o) <- defaultManufacturingOrderType(); 

scheduledDateTime 'start date' = DATA DATETIME (ManufacturingOrder);
scheduledDateTime(ManufacturingOrder o) <- currentDateTime() WHEN SET(o IS ManufacturingOrder);
@defineDateTimeAggregation(ManufacturingOrder, scheduled, ' start');

@defineNumber(manufacturingOrder, 'Manufacturing Orders', 'MO');

numberDate 'Description' (ManufacturingOrder o) = number(o) + ' from ' + scheduledDateTime(o) IN id;

item 'Items' = DATA Item (ManufacturingOrder) NONULL;
nameItem 'Items' (ManufacturingOrder m) = name(item(m));

uom (ManufacturingOrder o) = uom(item(o));
nameUom 'Unit.' (ManufacturingOrder m) = name(uom(m));

// bom
bom 'Specification' = DATA Bom (ManufacturingOrder) NONULL;
descriptionBom 'Specification' (ManufacturingOrder m) = description(bom(m));
CONSTRAINT bom(ManufacturingOrder m) AND NOT item(m) = item(bom(m))
    CHECKED BY bom[ManufacturingOrder]
    MESSAGE 'Manufacturing order BOM item must be equal to manufacturing order item';

WHEN LOCAL CHANGED(item(ManufacturingOrder o)) AND NOT CHANGED(bom(o)) AND defaultBom(item(o)) DO
    bom(o) <- defaultBom(item(o));

company = DATA Company (ManufacturingOrder);
nameCompany 'Company' (ManufacturingOrder m) = name(company(m));
WHEN LOCAL SET(ManufacturingOrder o IS ManufacturingOrder) AND NOT CHANGED(company(o)) DO company(o) <- defaultCompany(); 

materialsLocation 'writeOffFrom' = DATA Location (ManufacturingOrder);
nameMaterialsLocation 'writeOffFrom' (ManufacturingOrder m) = name(materialsLocation(m));
WHEN LOCAL SETCHANGED(type(ManufacturingOrder mo)) AND NOT materialsLocation(mo) DO materialsLocation(mo) <- materialsLocation(type(mo));

unbuild 'Disassembly' (ManufacturingOrder mo)= unbuild(type(mo)); 

// consumed
CLASS ConsumedLine 'Materials';

manufacturingOrder = DATA ManufacturingOrder (ConsumedLine) NONULL DELETE;

countConsumedLine 'Material lines' (ManufacturingOrder m) = GROUP SUM 1 IF manufacturingOrder(ConsumedLine l) = m MATERIALIZED;
index 'No' = PARTITION SUM 1 ORDER ConsumedLine l BY manufacturingOrder(l) IN id MATERIALIZED CHARWIDTH 3;

item 'Items' = DATA Item (ConsumedLine);
nameItem 'Items' (ConsumedLine l) = name(item(l));
idBarCodeItem 'Barcode' (ConsumedLine l) = idBarCode(item(l));
idItem 'Code' (ConsumedLine l) = id(item(l));

uom (ConsumedLine l) = uom(item(l));
nameUom 'UOM name' (ConsumedLine l) = name(uom(l));

toConsume 'Use up' = DATA NUMERIC[16,3] (ConsumedLine);

toConsume 'Use up' (ManufacturingOrder o) = GROUP SUM toConsume(ConsumedLine l) IF manufacturingOrder(l) = o AND item(l) = item(o) MATERIALIZED;

// finished
CLASS FinishedLine 'Products';

manufacturingOrder = DATA ManufacturingOrder (FinishedLine) NONULL DELETE;

countFinishedLine 'Product lines' (ManufacturingOrder m) = GROUP SUM 1 IF manufacturingOrder(ConsumedLine l) = m MATERIALIZED;
index 'No' = PARTITION SUM 1 ORDER FinishedLine l BY manufacturingOrder(l) IN id MATERIALIZED CHARWIDTH 3;

item 'Items' = DATA Item (FinishedLine);
nameItem 'Items' (FinishedLine l) = name(item(l));
idBarCodeItem 'Barcode' (FinishedLine l) = idBarCode(item(l));
idItem 'Code' (FinishedLine l) = id(item(l));

uom 'UOM name' = DATA Uom (FinishedLine);
nameUom 'UOM name' (FinishedLine l) = name(uom(l));
WHEN LOCAL CHANGED(item(FinishedLine l)) DO uom(l) <- uom(item(l));

toProduce 'Produce' = DATA NUMERIC[16,3] (FinishedLine);

costRatio 'Share of cost' (FinishedLine) = DATA NUMERIC[16,3] (FinishedLine);

costRatio (ManufacturingOrder o) = GROUP SUM costRatio(FinishedLine l) IF manufacturingOrder(l) = o MATERIALIZED;
normalizedCostRatio (FinishedLine l) = IF costRatio(manufacturingOrder(l)) THEN 
                                                                costRatio(l) / costRatio(manufacturingOrder(l)) ELSE 
                                                                (1.0 IF item(l) = item(manufacturingOrder(l))); 

toProduce 'Produce' (ManufacturingOrder o) = GROUP SUM toProduce(FinishedLine l) IF manufacturingOrder(l) = o AND item(l) = item(o) MATERIALIZED;

// manufacture
toManufacture 'Produce' (ManufacturingOrder o) = IF unbuild(o) THEN toConsume(o) ELSE toProduce(o) MATERIALIZED;

// line properties
nameType 'Type' (ConsumedLine l) = nameType(manufacturingOrder(l));
scheduledDateTime 'start date' (ConsumedLine l) = scheduledDateTime(manufacturingOrder(l));
number 'Room' (ConsumedLine l) = number(manufacturingOrder(l));
descriptionBom 'Specification' (ConsumedLine l) = descriptionBom(manufacturingOrder(l));

edit (ConsumedLine l) + { edit(manufacturingOrder(l)); } 

FORM manufacturingOrder 'Manufacturing Order'
    OBJECTS o = ManufacturingOrder PANEL 
    PROPERTIES(o) READONLY unbuild
    PROPERTIES(o) nameType, scheduledDateTime, number, nameCompany, 
                  nameItem, toManufacture, nameUom, 
                  descriptionBom, nameMaterialsLocation 
    
    OBJECTS c = ConsumedLine
    PROPERTIES(c) index READONLY, nameItem, nameUom, idBarCodeItem, idItem, toConsume, NEW, DELETE
    FILTERS manufacturingOrder(c) = o

    OBJECTS l = FinishedLine
    PROPERTIES(l) index READONLY, nameItem, nameUom, idBarCodeItem, idItem, toProduce, costRatio, 
                  NEW, DELETE
    FILTERS manufacturingOrder(l) = o
    
    EDIT ManufacturingOrder OBJECT o
;

DESIGN manufacturingOrder {
    caption = (CONCAT ' ', 'Manufacturing Order', 'No' + number(o), 'from ' + scheduledDateTime(o));
    OBJECTS {
        NEW header {
            alignment = STRETCH;
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(o));
                MOVE PROPERTY(scheduledDateTime(o));
                MOVE PROPERTY(number(o)) { notNull = TRUE; }
                MOVE PROPERTY(nameCompany(o));
            }
            NEW headerRight {
                MOVE PROPERTY(nameItem(o)) { notNull = TRUE; }
                MOVE PROPERTY(unbuild(o));
                NEW quantity {
                    type = CONTAINERH;
                    MOVE PROPERTY(toManufacture(o));
                    MOVE PROPERTY(nameUom(o));
                }
                MOVE PROPERTY(descriptionBom(o)) { notNull = TRUE; };
            }
        }
        NEW details {
            fill = 1;
            type = TABBED;
            NEW consumed {
                caption = 'Materials';
                MOVE PROPERTY(nameMaterialsLocation(o));
                MOVE BOX(c);
            }
            NEW finished {
                caption = 'Products';
                NEW finishedHeader { 
                    type = CONTAINERH;
                    alignment = STRETCH; 
                } 
                MOVE BOX(l);
            }
        }   
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

background (ManufacturingOrder o) = ABSTRACT CASE COLOR (ManufacturingOrder);

FORM manufacturingOrders 'Manufacturing Orders'
    OBJECTS o = ManufacturingOrder
    PROPERTIES(o) READONLYIF isReadonly() BACKGROUND background(o)
                           nameType, scheduledDateTime, number, nameCompany, 
                           nameItem, unbuild READONLY, 
                           toManufacture READONLY, nameUom READONLY, 
                           descriptionBom, 
                           nameMaterialsLocation,
                           countConsumedLine READONLY, countFinishedLine READONLY
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
    
    LIST ManufacturingOrder OBJECT o
;

@extendFormEditable(manufacturingOrders);

@defineDocObjectsForm(manufacturingOrders, o, 'Orders');
@defineDocStatusForm(manufacturingOrder, o);
@defineDocLocationAccess(manufacturingOrder, o, materials);

NAVIGATOR {
    operations {
        NEW manufacturingOrders;
    }
}

// copy
extraCopy ABSTRACT (ManufacturingOrder, ManufacturingOrder);

clone(ManufacturingOrder to, ManufacturingOrder from) {
    type(to) <- type(from);

    item(to) <- item(from);
    bom(to) <- bom(from);
    company(to) <- company(from);
    materialsLocation(to) <- materialsLocation(from);
    
    FOR manufacturingOrder(ConsumedLine ml) = from NEW ol = ConsumedLine DO {
        manufacturingOrder(ol) <- to;
        item(ol) <- item(ml);
        toConsume(ol) <- toConsume(ml);
    }

    FOR manufacturingOrder(FinishedLine ml) = from NEW ol = FinishedLine DO {
        manufacturingOrder(ol) <- to;
        item(ol) <- item(ml);
        uom(ol) <- uom(ml);
        toProduce(ol) <- toProduce(ml);
        costRatio(ol) <- costRatio(ml);
    }
    
    extraCopy(to, from);
}

copy 'Copy' (ManufacturingOrder from) {
    NEWSESSION {
        NEW to = ManufacturingOrder {
            clone(to, from);
            SHOW manufacturingOrder OBJECTS o = to DOCKED;
        }
    }
}

EXTEND FORM manufacturingOrder
    PROPERTIES(o) copy
;

DESIGN manufacturingOrder {
    secondaryActions {
        MOVE PROPERTY(copy(o)); 
    }
}

// fill
fillByQuantity (ManufacturingOrder o, NUMERIC[16,3] q) {
    DELETE ConsumedLine l WHERE manufacturingOrder(l) = o; 
    DELETE FinishedLine l WHERE manufacturingOrder(l) = o;

    IF unbuild(o) THEN {
        FOR bom(ComponentLine cl) = bom(o) DO NEW l = FinishedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(cl);
            uom(l) <- uom(cl);
            toProduce(l) <- NUMERIC[16,3](quantity(cl) * q / quantity(bom(o)));
            costRatio(l) <- costRatio(cl);
        }
                
        NEW l = ConsumedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(o);
            toConsume(l) <- q;
        }
                
        FOR bom(ByproductLine bl) = bom(o) DO NEW l = ConsumedLine {
            manufacturingOrder(l) <- o;
            item(l) <- product(bl);
            toConsume(l) <- NUMERIC[16,3](quantity(bl) * q / quantity(bom(o)));
        }
    } ELSE {
        FOR intermediateBom(bom(o), ComponentLine cl, TEXT path) AND NOT intermediate(nestedBom(cl)) DO NEW l = ConsumedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(cl);
            toConsume(l) <- NUMERIC[16,3](quantity(bom(o), cl, path) * q / quantity(bom(o)));
        }
                
        NEW l = FinishedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(o);
            uom(l) <- uom(o);
            toProduce(l) <- q;
        }
                
        FOR bom(ByproductLine bl) = bom(o) DO NEW l = FinishedLine {
            manufacturingOrder(l) <- o;
            item(l) <- product(bl);
            uom(l) <- uom(bl);
            toProduce(l) <- NUMERIC[16,3](quantity(bl) * q / quantity(bom(o)));
        }
    }
}

fillLines 'Fill in according to specification' (ManufacturingOrder o) {
    APPLY;
    IF canceled() THEN RETURN;
    
    NEWSESSION {
        DIALOG dialogQuantity OBJECTS q = toManufacture(o) INPUT DO {
            fillByQuantity(o, q);
            APPLY;
        }
    }
}

EXTEND FORM manufacturingOrder
    PROPERTIES(o) fillLines SHOWIF status(o) = ManufacturingOrderStatus.draft
;

DESIGN manufacturingOrder {
    primaryActions {
        MOVE PROPERTY(fillLines(o)) { fontStyle = 'bold'; }
    }
}
