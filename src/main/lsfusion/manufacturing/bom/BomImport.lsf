MODULE BomImport;

REQUIRE Bom;

NAMESPACE Manufacturing;

bomExport 'Export specifications' () {
    NEWSESSION {
        IF NOT (GROUP SUM 1 IF Bom b AND b IS Bom) THEN {
            NEW b = Bom {
                item(b) <- GROUP LAST Item i IF i IS Item;
                quantity(b) <- 1;
            }
        }
        LOCAL f = EXCELFILE ();
        
        EXPORT XLSX HEADER FROM 'Room' = number(Bom b), 'Items' = id(item(b)), 
            'Quantity' = quantity(b), 'Unit of measurement' = id(uom(b)) TO f;        
        open(f());
    }
}

componentLineExport 'Exporting BOM Lines' () {
    NEWSESSION {
        IF NOT (GROUP SUM 1 IF ComponentLine l AND l IS ComponentLine) THEN {
            NEW l = ComponentLine {
                bom(l) <- GROUP LAST Bom b IF b IS Bom;
                item(l) <- GROUP LAST Item i IF  i IS Item AND NOT i = item(bom(l));
                quantity(l) <- 1;
            }
        }
    
        LOCAL f = EXCELFILE ();
        
        EXPORT XLSX HEADER FROM 'Specification number' = number(bom(ComponentLine l)), 'Items' = id(item(l)), 
            'Quantity' = quantity(l), 'Unit of measurement' = id(uom(l)) TO f;
        open(f());
    }
}

byProductLineExport 'Exporting Derived Items' () {
    NEWSESSION {
        IF NOT (GROUP SUM 1 IF ByproductLine l AND l IS ByproductLine) THEN {
            NEW l = ByproductLine {
                bom(l) <- GROUP LAST Bom b IF b IS Bom;
                product(l) <- GROUP LAST Item i IF i IS Item AND NOT i = item(bom(l));
                quantity(l) <- 1;
            }
        }
    
        LOCAL f = EXCELFILE ();
        
        EXPORT XLSX HEADER FROM 'Specification number' = number(bom(ByproductLine l)), 'Items' = id(product(l)), 
                'Quantity' = quantity(l), 'Unit of measurement' = id(uom(l)) TO f;
        open(f());
    }
}

bomImport 'Importing BOMs' () {
    LOCAL number = STRING[28] (INTEGER);
    LOCAL idItem = STRING[50] (INTEGER);
    LOCAL quantity = NUMERIC[16,3] (INTEGER);
    LOCAL idUom = STRING[50] (INTEGER);
    
    INPUT f = EXCELFILE DO {
        NEWSESSION {
            IMPORT XLS HEADER FROM f TO number, idItem, quantity, idUom;
            
            FOR [GROUP SUM 1 BY idItem(INTEGER i)](num) AND NOT item[STRING](num) DO {
                MESSAGE 'There is no product in the database with a code ' + num + '. Import canceled';
                RETURN;
            }
            
            FOR imported(INTEGER i) DO NEW b = Bom {
                number(b) <- number(i);
                item(b) <- item(idItem(i));
                quantity(b) <- quantity(i);
            }
            
            APPLY;
            MESSAGE 'Import completed';
        }
    }
}

componentLineImport 'Importing BOM Lines' () {
    LOCAL id = STRING[28] (INTEGER);
    LOCAL idItem = STRING[50] (INTEGER );
    LOCAL quantity = NUMERIC[16,3] (INTEGER);
    LOCAL idUom = STRING[50] (INTEGER);
    
    INPUT f = EXCELFILE DO {
        NEWSESSION {
            IMPORT XLS HEADER FROM f TO id, idItem, quantity, idUom;
            
            FOR [GROUP SUM 1 BY id(INTEGER i)](num) AND NOT bom[STRING](num) DO {
                MESSAGE 'Missing BOM in database with code ' + num + '. Import canceled';
                RETURN;
            } 
            
            FOR imported(INTEGER i) DO NEW l = ComponentLine {
                bom(l) <- GROUP LAST Bom b IF number(b) = id(i);
                item(l) <- item(idItem(i));
                quantity(l) <- quantity(i);
            }
            
            APPLY;
            MESSAGE 'Import completed';
        }
    }
}

byProductLineImport 'Importing Derived Items' () {
    LOCAL id = STRING[28] (INTEGER);
    LOCAL idItem = STRING[50] (INTEGER );
    LOCAL quantity = NUMERIC[16,3] (INTEGER);
    LOCAL idUom = STRING[50] (INTEGER);
    
    INPUT f = EXCELFILE DO {
        NEWSESSION {
            IMPORT XLS HEADER FROM f TO id, idItem, quantity, idUom;
            
            FOR [GROUP SUM 1 BY id(INTEGER i)](num) AND NOT bom[STRING](num) DO {
                MESSAGE 'Missing BOM in database with code ' + num + '. Import canceled';
                RETURN;
            }
            
            FOR imported(INTEGER i) DO NEW l = ByproductLine {
                bom(l) <- GROUP LAST Bom b IF number(b) = id(i);
                product(l) <- item(idItem(i));
                quantity(l) <- quantity(i);
            }
            
            APPLY;
            MESSAGE 'Import completed';
        }
    }
}

EXTEND FORM migrationData 
    PROPERTIES bomExport(), bomImport(), componentLineExport(), componentLineImport(), byProductLineExport(), byProductLineImport()
;

DESIGN migrationData {
    commons {
        NEW category {
            caption = 'Specifications';
            NEW bom {
                type = CONTAINERH;
                MOVE PROPERTY(bomImport());
                MOVE PROPERTY(bomExport());
            }
            NEW componentLines {
                type = CONTAINERH;
                MOVE PROPERTY(componentLineImport());
                MOVE PROPERTY(componentLineExport());
            }
            NEW byProductLines {
                type = CONTAINERH;
                MOVE PROPERTY(byProductLineImport());
                MOVE PROPERTY(byProductLineExport());
            }
        }
    }
}
