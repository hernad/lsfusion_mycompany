MODULE Doc;

REQUIRE Authentication, Time, BarCode;

NAMESPACE Utils;

META defineDocObjectsForm (form, obj, title)
    DESIGN form {
        OBJECTS {
            NEW pane {
                fill = 1;
                type = CONTAINERH;
                NEW tabbedPane {
                    type = TABBED;
                    fill = 1;
                    MOVE BOX(obj) { caption = title; }
                }
                NEW rightPane {
                    NEW filters {
                        caption = 'Filters';
                        alignment = STRETCH;
                    }
                    NEW actions {
                        alignment = STRETCH;
                        caption = 'Actions';
                    }
                    NEW statuses {
                        alignment = STRETCH;
                        caption = 'Statuses';
                    }
                }
            }
        }
    }
END

META defineDocStatus (doc, title)
    CLASS ###doc##Status 'Статус '##title {
        draft 'Draft'
    }
    
    name 'Name' (###doc##Status s) = staticCaption(s) IF s IS ###doc##Status CHARWIDTH 12;
    
    status 'Status' = ABSTRACT CASE ###doc##Status (###doc) MATERIALIZED INDEXED;
    nameStatus 'Status' (###doc d) = name(status(d));
    colorStatus 'Colour' = ABSTRACT CASE COLOR (###doc);
    
    status(###doc d) += WHEN d IS ###doc THEN ###doc##Status.draft;
    colorStatus(###doc d) += WHEN status(d) = ###doc##Status.draft THEN RGB(187,242,210);
    
    readonly = ABSTRACT CASE BOOLEAN (###doc);
END

META defineDocStatusForm (doc, let)
    EXTEND FORM doc##s
        PROPERTIES(##let) READONLY nameStatus BACKGROUND colorStatus(##let) BEFORE number(##let)
        FILTERGROUP status
            FILTER 'Draft' status(##let) = ###doc##Status.draft
    ;
    
    EXTEND FORM doc
        PROPERTIES(##let) nameStatus BACKGROUND colorStatus(##let)
    ;
    
    DESIGN doc {
        NEW statusPane FIRST {
            caption = 'Statuses';
            type = CONTAINERH;
            alignment = STRETCH;                          
            NEW statusActions {
                type = CONTAINERH;                    
                flex = 1; 
                NEW primaryActions {
                    type = CONTAINERH;
                }
                NEW secondaryActions {
                    type = CONTAINERH;
                }           
            }
            NEW status {
                type = CONTAINERH;
                MOVE PROPERTY(nameStatus(##let));
            }
        }    
    } 
END

META defineDocSearchAction (doc, it, fun, capt)
    fun capt (###doc i, ###it p) = 
        GROUP SUM fun(###doc##Line l) BY doc(l), it(l);
    
    set###fun (###doc i, ###it p, NUMERIC[14,3] q) {
        IF last###doc##Line(i, p) THEN {
            IF q THEN
                fun(###doc##Line l) <- q IF l = last###doc##Line(i, p)
                    WHERE doc(l) = i AND it(l) = p;
            ELSE
                DELETE ###doc##Line l WHERE doc(l) = i AND it(l) = p;
        } ELSE
            IF q THEN
                NEW l = ###doc##Line{
                    doc(l) <- i;
                    it(l) <- p;
                    fun(l) <- q;
                }
    
    }
    
    change###fun (###doc i, ###it p) {
        INPUT q = NUMERIC[14,3] DO
            set###fun(i, p, q);
    }
END

META defineDocSearchTab (doc, it)
    EXTEND FORM doc
        TREE categories c = Category PARENT parent(c)
        PROPERTIES READONLY name(c)
        ORDERS name(c)
        
        OBJECTS itm = ###it
        PROPERTIES(itm) READONLY name, nameUom, idBarCode, id
        PROPERTIES(itm) NEWSESSION EDIT
        ORDERS name(itm)
        FILTERS level(category(itm), c)
        FILTERGROUP active
            FILTER 'Active' active(itm) 'F10' DEFAULT  
    ;
    
    DESIGN doc {
        details {
            NEW search {
                caption = 'Selection';
                type = SPLITH;
                fill = 1;
                MOVE BOX(TREE categories);
                MOVE BOX(itm) { 
                    fill = 2;
                }
            }
        }
    }
END

META defineDocSearch (doc, it, fun, capt, let)
    last###doc##Line (###doc i, ###it p) = GROUP LAST ###doc##Line l ORDER l BY doc(l), it(l);

    @defineDocSearchAction(doc, it, fun, capt);
    @defineDocSearchTab(doc, it);
    
    EXTEND FORM doc
        PROPERTIES(let, itm) fun ON CHANGE change###fun(let, itm)
    ;        
END

META defineDocSearch (doc, it, fun, capt, let, check)
    @defineDocSearch(doc, it, fun, capt, let);
    
    EXTEND FORM doc
        FILTERS ##check(itm)
    ;
END

disableHistory 'Disable history recording' = DATA BOOLEAN () PREREAD;
EXTEND FORM System.options 
    PROPERTIES() disableHistory
;
DESIGN System.options {
    commons { 
        MOVE PROPERTY(disableHistory()); 
    }
}

META defineDocHistory(doc, let, class, fun)

    @defineDocHistoryHead(doc, ##let);
    
    WHEN SETCHANGED(###doc##Line l IS ###doc##Line) AND doc(l) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft AND NOT disableHistory() DO {     
        NEW h = ###doc##History {
            doc(h) <- ##let;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            computer(h) <- currentComputer();
            type(h) <- 'Added line';
            description (h) <- 'Added line with index ' + index(l);
        }
    }
    
    WHEN DROPPED(###doc##Line l IS ###doc##Line) AND PREV(doc(l)) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft AND NOT disableHistory() DO {     
        NEW h = ###doc##History {
            doc(h) <- ##let;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            computer(h) <- currentComputer();
            type(h) <- 'Removed line';
            description (h) <- 'Deleted line with index ' + PREV(index(l));
        }
    }
    
    WHEN CHANGED(##fun(###doc##Line l)) AND doc(l) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft AND NOT disableHistory() DO {     
        NEW h = ###doc##History {
            doc(h) <- ##let;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Changed the original quantity';
            description (h) <- 'Changed the original product quantity ' + name###class(l) + ' on ' + ##fun(l);
        }
    }
    
    WHEN CHANGED(class(###doc##Line l)) AND doc(l) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft AND NOT disableHistory() DO {     
        NEW h = ###doc##History {
            doc(h) <- ##let;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            computer(h) <- currentComputer();
            type(h) <- 'Modified product';
            description (h) <- 'Product changed in line ' + index(l) + ' on ' + name###class(l);
        }
    }
END

META defineDocHistoryHead(doc, let)
    CLASS ###doc##History 'Change history';
    
    doc = DATA ###doc (###doc##History);

    dateTime 'Date' = DATA DATETIME (###doc##History);
    
    user = DATA User (###doc##History);
    nameUser 'User' (###doc##History l) = name(user(l));
    
    computer = DATA Computer (###doc##History);
    hostnameComputer 'Computer' (###doc##History l) = hostname(computer(l)) CHARWIDTH 10;
    
    type 'Type' = DATA ISTRING[100] (###doc##History) CHARWIDTH 15;
    description 'Description' = DATA TEXT (###doc##History);
     
    WHEN SETCHANGED(status(###doc let)) AND NOT disableHistory() DO {     
        NEW l = ###doc##History {
            doc(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- 'Status changed';
            description (l) <- 'Changed status to ' + staticCaption(status(let));
        }
    }

    EXTEND FORM doc
        OBJECTS doc##l = ###doc##History
        PROPERTIES(doc##l) READONLY dateTime, nameUser, hostnameComputer, type, description, pdescription = description PANEL
        FILTERS doc(doc##l) = let
    ;
    
    DESIGN doc {
        details {
            NEW history {
                caption = 'History';
                fill = 1;
                type = SPLITH;
                MOVE BOX(doc##l) { 
                    fill = 2;
                    PROPERTY(description(doc##l)) { valueHeight = 18; }
                }
                MOVE PROPERTY(pdescription) { panelCaptionAbove = TRUE; fill = 1; }
            }
        }
    }
END

META defineDocRelation(docTo, docFrom, captTo, captFrom, objTo, objFrom)
    docTo = DATA ###docTo (###docFrom) INDEXED;
    numberDate###docTo captTo (###docFrom s) = numberDate(docTo(s)); 
    
    count###docFrom (###docTo t) = GROUP SUM 1 IF docTo(###docFrom f) = t;
    
    // form
    open###docTo (###docFrom f) { 
        edit(docTo(f)); 
    }
    EXTEND FORM docFrom
        PROPERTIES(objFrom) numberDate###docTo ON CHANGE open###docTo(objFrom) SHOWIF docTo(objFrom)
    ;
    DESIGN docFrom {
        footer {
            MOVE PROPERTY(numberDate###docTo(objFrom));
        }
    }
    EXTEND FORM docFrom##s
        PROPERTIES(objFrom) READONLY numberDate###docTo
    ;
END

META defineDocLineRelation(docTo, docFrom, captTo, captFrom, objTo, objFrom)
    docTo##Line = DATA ###docTo##Line (###docFrom##Line) INDEXED;
    
    in (###docTo i, ###docFrom s) = GROUP SUM 1 IF docTo(docTo##Line(###docFrom##Line l)) = i AND docFrom(l) = s MATERIALIZED; 
    
    count###docTo (###docFrom s) = GROUP SUM 1 IF in(###docTo i, s) MATERIALIZED;
    count###docFrom##s (###docTo i) = GROUP SUM 1 IF in(i, ###docFrom s) MATERIALIZED;
    numberDate###docTo captTo (###docFrom s) = GROUP CONCAT numberDate(###docTo i) IF in(i, s), ',' CHARWIDTH 30; 
    numberDate###docTo##Line captTo (###docFrom##Line s) = numberDate(docTo##Line(s)); 

    numberDate###docFrom##s captFrom (###docTo s) = GROUP CONCAT numberDate(###docFrom i) IF in(s, i), ',' CHARWIDTH 30; 
    
    count###docFrom##Line (###docTo b) = GROUP SUM 1 IF docTo(docTo##Line(###docFrom##Line l)) = b;
    
    // form
    open###docTo (###docFrom s) { 
        FOR in(###docTo i, s) DO 
            edit(i); 
    }
    EXTEND FORM docFrom
        PROPERTIES(objFrom) numberDate###docTo ON CHANGE open###docTo(objFrom) SHOWIF count###docTo(objFrom)
    ;
    DESIGN docFrom {
        footer {
            MOVE PROPERTY(numberDate###docTo(objFrom));
        }
    }
    EXTEND FORM docFrom##s
        PROPERTIES(objFrom) READONLY numberDate###docTo
    ;
    EXTEND FORM docTo##s
        PROPERTIES(objTo) READONLY numberDate###docFrom##s
    ;
END

META defineDocDiscount (doc)
    discount 'Discount, %' = DATA NUMERIC[5,2] (###doc##Line);
    
    discountPrice 'Discount price' = DATA NUMERIC[10,2] (###doc##Line);
    resultPrice 'Final price' (###doc##Line l) = OVERRIDE discountPrice(l), price(l);
    
    WHEN LOCAL (CHANGED(price(###doc##Line l)) OR CHANGED(discount(l))) AND NOT CHANGED(discountPrice(l)) DO 
        discountPrice(l) <- NUMERIC[10,2] (price(l) * (100.0 - discount(l)) / 100.0);
    
    recalcDiscount (###doc##Line l) { 
        discount(l) <- NUMERIC[5,2](min(100.0 - (discountPrice(l) * 100.0 / price(l)), 100.0));
    }
    changeDiscountPrice (###doc##Line l) {
        INPUT p = discountPrice(l) CHANGE DO {
            recalcDiscount(l);
        } 
    }
    
END

META defineDocDiscountForm (doc)
    EXTEND FORM doc
        PROPERTIES(l) AFTER price(l) discount, discountPrice ON CHANGE changeDiscountPrice(l)
    ;
END

META defineDocLinesCount(doc, d) 
    count###doc###Line 'Number of lines' (###doc d) = GROUP SUM 1 IF doc(###doc###Line l) = d MATERIALIZED;
    
    EXTEND FORM doc##s PROPERTIES(d) READONLY count###doc###Line;
END

META defineDocFilter(doc, cls, property, obj, caption)
    property = DATA LOCAL NESTED cls ();
    name###property caption = name(property());

    EXTEND FORM doc##s 
        PROPERTIES() name###property
        
        FILTERS property(obj) = property() OR NOT property()
    ;
    
    DESIGN doc##s {
        filters {
            MOVE PROPERTY(name###property());
        }
    }

END