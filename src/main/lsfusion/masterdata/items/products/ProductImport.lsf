MODULE ProductImport;

REQUIRE Product, BarCode, System, 
        ItemPurchase, ItemSales;

NAMESPACE MasterData;

productExport 'Export Products' () {
    NEWSESSION {
        IF NOT (GROUP SUM 1 IF Product p IS Product) THEN {
            NEW p = Product {
                id(p) <- '123';
                dataName(p) <- 'My product';
                category(p) <- GROUP LAST Category c ORDER c WHERE c IS Category;
                
                weight(p) <- 0.415;
                volume(p) <- 1.5;
                
                salesPrice(p) <- 6.14;
                reference(p) <- 'ABC4251';
                description(p) <- 'The best product';
                archived(p) <- TRUE;
            }
        }
    
        LOCAL f = EXCELFILE ();
        EXPORT XLSX HEADER FROM 'Product code' = id(Product p), 'Name' = dataName(p), 'Category code' = idCategory(p), 
                                'Unit code' = idUom(p), 'Unit weight, kg' = weight(p), 'Unit volume, m3' = volume(p),
                                'Selling price' = salesPrice(p), 'Country of origin code' = id(countryOrigin(p)), 
                                'Article' = reference(p), 'Description' = description(p), 'Inactive' = archived(p)  
                                WHERE p IS Product TO f;   
        open(f());
    }
}

productImport 'Import Products' () {
    LOCAL id = STRING[50] (INTEGER);
    LOCAL name = ISTRING[50] (INTEGER);
    LOCAL idCategory = ISTRING[50] (INTEGER);
    LOCAL idUom = ISTRING[50] (INTEGER);
    LOCAL weight = NUMERIC[11,3] (INTEGER);
    LOCAL volume = NUMERIC[11,3] (INTEGER);
    LOCAL salesPrice = NUMERIC[10,2] (INTEGER);
    LOCAL idCountryOrigin = STRING[3] (INTEGER);
    LOCAL reference = STRING[50] (INTEGER);
    LOCAL description = TEXT (INTEGER);
    LOCAL archived = BOOLEAN (INTEGER);
       
    INPUT f = EXCELFILE DO {
        NEWSESSION {
            IMPORT XLS HEADER FROM f TO id = A, name = B, idCategory = C, idUom = D, weight = E,
                                        volume = F, salesPrice = G, idCountryOrigin = H, reference = I, description = J, archived = K; 
            
            FOR [GROUP SUM 1 BY idCategory(INTEGER i)](STRING num) AND NOT category(num) DO {
                MESSAGE 'Missing category in database with code ' + num + '. Import canceled';
                RETURN;
            }  

            FOR [GROUP SUM 1 BY idUom(INTEGER i)](STRING num) AND NOT uom(num) DO {
                MESSAGE 'Unit of measure is missing in the database with code ' + num + '. Import canceled';
                RETURN;
            }  

            FOR [GROUP SUM 1 BY idCountryOrigin(INTEGER i)](STRING num) AND NOT country(num) DO {
                MESSAGE 'Country missing in database with code ' + num + '. Import canceled';
                RETURN;
            }  
            
            FOR id(INTEGER i) AND NOT item(id(i)) DO NEW p = Product {
                id(p) <- id(i);
            }
            
            FOR id(Product p) = id(INTEGER i) DO {
                dataName(p) <- name(i);
                category(p) <- category(idCategory(i));
                uom(p) <- uom(idUom(i));
                weight(p) <- weight(i);
                volume(p) <- volume(i);
                salesPrice(p) <- salesPrice(i);
                countryOrigin(p) <- country(idCountryOrigin(i));
                reference(p) <- reference(i);
                description(p) <- description(i);
                archived(p) <- archived(i);
            }
            APPLY;
            MESSAGE 'Import completed';
        }
    }    
}

EXTEND FORM migrationData 
    PROPERTIES productExport(), productImport()
;

DESIGN migrationData {
    commons {
        NEW product {
            type = CONTAINERH;
            caption = 'Products';
            MOVE PROPERTY(productImport());
            MOVE PROPERTY(productExport());
        }
    }
}