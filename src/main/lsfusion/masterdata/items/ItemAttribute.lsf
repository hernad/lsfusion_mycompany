MODULE ItemAttribute;

REQUIRE Item;

NAMESPACE MasterData;

CLASS ItemAttribute 'Attribute';

id 'Code' = DATA STRING[50] (ItemAttribute) IN id CHARWIDTH 8;
itemAttribute (STRING[50] id) = GROUP AGGR ItemAttribute i BY id(i);

index 'No' (ItemAttribute a) = PARTITION SUM 1 ORDER a AS ItemAttribute MATERIALIZED CHARWIDTH 2;
itemAttribute (INTEGER i) = GROUP LAST ItemAttribute a ORDER a BY index(a);  

//обязателен для заполнения
nonull 'Required' = DATA BOOLEAN (ItemAttribute);

name 'Name' = DATA ISTRING[50] (ItemAttribute) IN id NONULL;

// задание доступных категорий для атрибутов
set 'On.' = DATA BOOLEAN (ItemAttribute, Category);

// с учетом групп
valid (ItemAttribute a, Category c) = GROUP LAST set(a, Category cc) ORDER DESC level(c, cc); 

// список возможных значений для атрибута
CLASS ItemAttributeValue 'Value';

itemAttribute 'Attribute' = DATA ItemAttribute (ItemAttributeValue) NONULL DELETE;
nameAttribute 'Attribute' (ItemAttributeValue v) = name(itemAttribute(v));

value 'Value' = DATA STRING (ItemAttributeValue) NONULL IN id;
value (ItemAttribute a, STRING v) = GROUP AGGR ItemAttributeValue av BY itemAttribute(av), value(av);

// форма по вводу значений
FORM value 'Value'
    OBJECTS v = ItemAttributeValue PANEL 
    PROPERTIES(v) value 
;

newValue 'Value' (ItemAttribute a) {
    NEWSESSION {
        NEW v = ItemAttributeValue {
            itemAttribute(v) <- a;
            SHOW value OBJECTS v = v;
        }
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT';

// задание доступных категорий для конкретных значений
set 'On.' = DATA BOOLEAN (ItemAttributeValue, Category);
valid (ItemAttributeValue v, Category c) = GROUP LAST set(v, Category cc) ORDER DESC level(c, cc); 

countCategory 'Number of preset categories' (ItemAttributeValue v) = GROUP SUM 1 IF set(v, Category c) MATERIALIZED;

CONSTRAINT set(ItemAttributeValue v, Category c) AND NOT valid(itemAttribute(v), c)
    MESSAGE 'The value category must match the attribute category';

// диалог выбора значений по атрибуту
FORM values 'Values'
    OBJECTS a = ItemAttribute PANEL, c = Category PANEL 

    OBJECTS v = ItemAttributeValue
    PROPERTIES READONLY value(v)
    PROPERTIES newValue(a) DRAW v TOOLBAR 
    PROPERTIES(v) NEWSESSION EDIT, DELETE
    FILTERS itemAttribute(v) = a,
            valid(v, c) OR NOT countCategory(v)
;

FORM childValues 'Values'
    OBJECTS a = ItemAttribute PANEL, c = Category PANEL 

    OBJECTS v = ItemAttributeValue
    PROPERTIES READONLY value(v)
    PROPERTIES newValue(a) DRAW v TOOLBAR 
    PROPERTIES(v) NEWSESSION EDIT, DELETE
    FILTERS itemAttribute(v) = a,
            valid(v, c) OR (GROUP SUM 1 IF set(v, Category cc) AND level(cc, c)) OR NOT countCategory(v)
;

// формы ввода атрибутов
FORM attributes 'Attributes'
    OBJECTS a = ItemAttribute
    PROPERTIES(a) READONLY index, id, name, nonull
    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE 
    
    LIST ItemAttribute OBJECT a
;

FORM attribute 'Attribute'
    OBJECTS a = ItemAttribute PANEL
    PROPERTIES(a) name, id, nonull
    
    TREE categories c = Category PARENT parent(c) 
    PROPERTIES name(c) READONLY, set(a, c) BACKGROUND (GROUP SUM 1 IF set(a, Category cc) AND level(cc, c))
    ORDERS name(c)
           
    OBJECTS v = ItemAttributeValue
    PROPERTIES(v) value, NEW, DELETE
    FILTERS itemAttribute(v) = a
    
    TREE cat cc = Category PARENT parent(cc)
    PROPERTIES name(cc) READONLY, set(v, cc) BACKGROUND (GROUP SUM 1 IF set(v, Category ccc) AND level(ccc, cc))
    FILTERS (GROUP LAST set(a, Category pcc) ORDER level(cc, pcc)) OR (GROUP SUM 1 IF set(a, Category ccc) AND level(ccc, cc)) 
    ORDERS name(cc)
    
    EDIT ItemAttribute OBJECT a
;

DESIGN attribute {
    OBJECTS {
        NEW pane {
            fill = 1;
            type = SPLITH;
            NEW attribute {
                fill = 1;
                NEW name {
                    caption = 'Attribute options';
                    MOVE PROPERTY(name(a));
                    MOVE PROPERTY(id(a));
                    MOVE PROPERTY(nonull(a));
                }
            }
            NEW details {
                type = TABBED;
                fill = 5;
                MOVE BOX(TREE categories) {
                    caption = 'Attribute categories';
                }
                NEW values {
                    type = CONTAINERH;
                    caption = 'Values';
                    fill = 2;
                    MOVE BOX(v);
                    MOVE BOX(TREE cat) {
                        caption = 'Value categories';
                        fill = 1;
                    }    
                }
            }
        }
    }
}

NAVIGATOR {
    masterData {
        NEW attributes;
    }
}

// Задание значения атрибута для товара
attribute = DATA ItemAttributeValue (Item, ItemAttribute);
value 'Value' (Item i, ItemAttribute a) = value(attribute(i, a));

CONSTRAINT nonull(ItemAttribute a) AND NOT value(Item i, a) AND valid(a, category(i)) AND NOT SET(nonull(a))
    MESSAGE 'The attribute is required';

CONSTRAINT attribute(Item i, ItemAttribute a) AND (countCategory(attribute(i, a)) AND NOT valid(attribute(i, a), category(i)))
    CHECKED BY attribute[Item, ItemAttribute]
    MESSAGE 'The item category must match the value category';

CONSTRAINT attribute(Item i, ItemAttribute a) AND NOT itemAttribute(attribute(i, a)) = a
    CHECKED BY attribute[Item, ItemAttribute]
    MESSAGE 'An invalid value was selected for this item';
    
CONSTRAINT DROPPED(ItemAttributeValue v IS ItemAttributeValue) AND PREV(attribute(Item i, ItemAttribute a)) = v
    MESSAGE 'You cannot delete the value that is in use';

readonly = ABSTRACT BOOLEAN (Item, ItemAttribute);

EXTEND FORM item
    OBJECTS a = ItemAttribute
    PROPERTIES name(a) READONLY, 
               value(i, a) ON CHANGE { DIALOG values OBJECTS a = a, c = category(i), v = attribute(i, a) CHANGE; } 
                           READONLYIF readonly(i, a) BACKGROUND
                                IF readonly(i, a) THEN RGB(223,223,223) ELSE
                                                      (RGB(245,184,184) IF NOT value(i, a) AND nonull(a))
    FILTERS valid(a, category(i))
;

DESIGN item {
    tabs {
        NEW attributes FIRST {
            caption = 'Attributes';
            MOVE BOX(a);
        }
    }
}

// Формирование наименования для товара
sequence 'Sequence' = DATA INTEGER (ItemAttribute);
prefix 'Prefix' = DATA STRING[15] (ItemAttribute);
suffix 'Suffix' = DATA STRING[15] (ItemAttribute);

fullValue 'Full value' (Item i, ItemAttribute a) = (CONCAT '', prefix(a), value(i, a), suffix(a)) IF value(i, a);
suffixName(Item i) += STRING(GROUP CONCAT fullValue(i, ItemAttribute a) IF sequence(a), ' ' ORDER sequence(a), a);

EXTEND FORM attributes PROPERTIES READONLY sequence(a);
EXTEND FORM attribute PROPERTIES(a) sequence, prefix, suffix;

DESIGN attribute {
    attribute {
        NEW itemValues {
            caption = 'Formation of the name';
            MOVE PROPERTY(sequence(a));
            MOVE PROPERTY(prefix(a));
            MOVE PROPERTY(suffix(a));
        }
    }
}

// Фильтр по атрибутам на форме номенклатуры
attributeFilter = DATA LOCAL ItemAttributeValue (ItemAttribute);
value 'Value' (ItemAttribute a) = value(attributeFilter(a));

CONSTRAINT attributeFilter(ItemAttribute a) AND NOT itemAttribute(attributeFilter(a)) = a
    CHECKED BY attributeFilter MESSAGE '';

META defineItemAttributeForm(form, obj, gobj)
    EXTEND FORM form
        OBJECTS ia = ItemAttribute BEFORE gobj
        PROPERTIES name(ia) READONLY, value(ia) ON CHANGE { DIALOG childValues OBJECTS a = ia, c = c, v = attributeFilter(ia) CHANGE; }
        FILTERS attributeFilter(ia) = attribute(obj, ia) OR NOT attributeFilter(ia)
        FILTERS GROUP SUM 1 IF set(ia, Category cc) AND (level(cc, c) OR level(c, cc)) 
    ;
END

META defineItemAttributeForm(form, obj)
    @defineItemAttributeForm(form, obj, obj);
END

@defineItemAttributeForm(items, i);
DESIGN items {
    tabs {
        NEW filters {
            caption = 'Filters';
            MOVE BOX(ia);
        }
    }
}

// копирование атрибутов при копировании товара
copy(Item n, Item o) + {
   FOR attribute(o, ItemAttribute a) DO {
       attribute(n, a) <- attribute(o, a);
   }
}

// index values

value (Item i, INTEGER index) = value(i, itemAttribute(index));

attribute1(Item i) = value(i, 1);
attribute2(Item i) = value(i, 2);
attribute3(Item i) = value(i, 3);
attribute4(Item i) = value(i, 4);
attribute5(Item i) = value(i, 5);
attribute6(Item i) = value(i, 6);
attribute7(Item i) = value(i, 7);
attribute8(Item i) = value(i, 8);
attribute9(Item i) = value(i, 9);

META defineAttributeForm (form, obj)
    EXTEND FORM form
        PROPERTIES(obj) READONLY attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9   
    ;
END
 