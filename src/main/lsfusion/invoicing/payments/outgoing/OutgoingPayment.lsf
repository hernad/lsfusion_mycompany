MODULE OutgoingPayment;

REQUIRE Time, MetaNumerator, Doc, DateUtils,
        Partner, Company,
        Account, BankAccount, CashAccount,
        OutgoingPaymentType;

NAMESPACE Invoicing;

CLASS OutgoingPayment 'Исходящий платеж';

@defineDocStatus(outgoingPayment, 'outgoing payment');

// type
type 'Type' = DATA OutgoingPaymentType (OutgoingPayment) NONULL;
nameType 'Type' (OutgoingPayment s) = name(type(s));

dateTime 'Date' = DATA DATETIME (OutgoingPayment) NONULL;
dateTime(OutgoingPayment p) <- currentDateTime() WHEN SET(p IS OutgoingPayment);
@defineDateTimeAggregation(OutgoingPayment);

@defineNumberType(outgoingPayment);

numberDate 'Description' (OutgoingPayment p) = number(p) + ' from ' + dateTime(p) IN id;

// partners
partner 'Partner' = DATA Partner (OutgoingPayment);
namePartner 'Partner' (OutgoingPayment p) = name(partner(p));

WHEN LOCAL SETCHANGED(type(OutgoingPayment p)) AND NOT CHANGED(partner(p)) AND interpay(type(p)) AND countCompany() = 1 DO
    partner(p) <- defaultCompany();

CONSTRAINT interpay(type(OutgoingPayment p)) AND NOT partner(p) IS Company
                CHECKED BY partner
                MESSAGE 'With an internal payment';

company 'Company' = DATA Company (OutgoingPayment) NONULL;
nameCompany 'Company' (OutgoingPayment p) = name(company(p));

WHEN LOCAL SET(OutgoingPayment p IS OutgoingPayment) AND NOT CHANGED(company(p)) DO
    company(p) <- defaultCompany();

// accounts
// partner
partnerAccount = DATA Account (OutgoingPayment);
namePartnerAccount 'Partner account' (OutgoingPayment p) = name(partnerAccount(p));

WHEN LOCAL CHANGED(partner(OutgoingPayment p)) AND NOT CHANGED(partnerAccount(p)) DO
    partnerAccount(p) <- defaultAccount(partner(p), type(p));
WHEN LOCAL SET(type(OutgoingPayment p)) AND NOT CHANGED(partnerAccount(p)) DO
    partnerAccount(p) <- defaultAccount(partner(p), type(p)); 

CONSTRAINT partnerAccount(OutgoingPayment p) AND NOT holder(partnerAccount(p)) = partner(p)
                CHECKED BY partnerAccount
                MESSAGE 'The Partner account owner does not match the Partner in the outgoing payment';
CONSTRAINT partnerAccount(OutgoingPayment p) IS BankAccount AND NOT bank(type(p))
                CHECKED BY partnerAccount
                MESSAGE 'Partner bank accounts are not allowed for this type of payment';
CONSTRAINT partnerAccount(OutgoingPayment p) IS CashAccount AND NOT cash(type(p))
                CHECKED BY partnerAccount
                MESSAGE 'Partner cash desks are not allowed for this type of payment.';

// company
companyAccount = DATA Account (OutgoingPayment);
nameCompanyAccount 'Company account' (OutgoingPayment p) = name(companyAccount(p));

WHEN LOCAL CHANGED(company(OutgoingPayment p)) AND NOT CHANGED(companyAccount(p)) DO
    companyAccount(p) <- defaultAccount(company(p), type(p));
WHEN LOCAL SET(type(OutgoingPayment p)) AND NOT CHANGED(companyAccount(p)) DO
    companyAccount(p) <- defaultAccount(company(p), type(p)); 

CONSTRAINT companyAccount(OutgoingPayment p) AND NOT holder(companyAccount(p)) = company(p)
                CHECKED BY companyAccount
                MESSAGE 'The company account holder does not match the company in the outgoing payment';
CONSTRAINT companyAccount(OutgoingPayment p) IS BankAccount AND NOT bank(type(p))
                CHECKED BY companyAccount
                MESSAGE 'Company bank accounts are not allowed for this type of payment';
CONSTRAINT companyAccount(OutgoingPayment p) IS CashAccount AND NOT cash(type(p))
                CHECKED BY companyAccount
                MESSAGE 'For this type of payment';

amount 'Amount' = DATA NUMERIC[14,2] (OutgoingPayment) NONULL;

note 'Note' = DATA ISTRING[50] (OutgoingPayment);
reference 'Link' = DATA ISTRING[50] (OutgoingPayment);

// forms
FORM outgoingPayment 'Исходящий платеж'
    OBJECTS p = OutgoingPayment PANEL 
    PROPERTIES(p) nameType, dateTime, number, amount,
                  namePartner, namePartnerAccount, 
                  nameCompany, nameCompanyAccount,
                  note, reference
    
    EDIT OutgoingPayment OBJECT p
;

DESIGN outgoingPayment {
    caption = (CONCAT ' ', 'Исходящий платеж', 'No' + number(p), 'from ' + dateTime(p));
    OBJECTS {
        NEW header {
            NEW params {
                caption = 'Parameters';
                type = CONTAINERH;
                alignment = STRETCH;
                MOVE PROPERTY(nameType(p)) { notNull = TRUE; } 
                MOVE PROPERTY(dateTime(p)); 
                MOVE PROPERTY(number(p));
                MOVE PROPERTY(amount(p));
            }
            NEW partner {
                caption = 'Partner';
                type = CONTAINERH;
                alignment = STRETCH;
                MOVE PROPERTY(namePartner(p));
                MOVE PROPERTY(namePartnerAccount(p));
            }
            NEW company { 
                caption = 'Company';
                type = CONTAINERH;
                alignment = STRETCH;
                MOVE PROPERTY(nameCompany(p)) { notNull = TRUE; }
                MOVE PROPERTY(nameCompanyAccount(p));
            }
            NEW otherInformation {
                caption = 'other information';
                alignment = STRETCH;
                MOVE PROPERTY(note(p)); 
                MOVE PROPERTY(reference(p));    
            }
        }
        NEW details {
            type = TABBED;
            fill = 1;
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

@defineDocHistoryHead(outgoingPayment, p);

FORM outgoingPayments 'Outgoing payments'
    OBJECTS p = OutgoingPayment
    PROPERTIES(p) READONLY nameType, dateTime, number, amount,
                           namePartner, namePartnerAccount, 
                           nameCompany, nameCompanyAccount, 
                           note, reference
    PROPERTIES(p) NEWSESSION NEW, EDIT, DELETE 
    
    LIST OutgoingPayment OBJECT p
;

@defineDocStatusForm(outgoingPayment, p);
@defineDateFilterForm(outgoingPayments, p);

NAVIGATOR {
    invoicing {
        operations {
            NEW outgoingPayments;
        }
    }
}
