MODULE Bill;

REQUIRE InvoicingSettings, TaxItem, BankAccount, 
        MetaTax, PaymentTermsPurchase, DateUtils, 
        ItemPurchase, ItemCost, PartnerPurchase, Company,
        BarCode, MetaNumerator, Doc, LocationEmployee,
        BillType, Product, ServiceP;

NAMESPACE Invoicing;

CLASS Bill 'Purchase';

@defineDocStatus(bill, 'accounts');

// type
type 'Type' = DATA BillType (Bill) NONULL;
nameType 'Type' (Bill s) = name(type(s));

WHEN LOCAL SET(Bill s IS Bill) AND NOT CHANGED(type(s)) DO type(s) <- defaultBillType(); 

// dateTime
dateTime 'Date' = DATA DATETIME (Bill) NONULL IN id;
WHEN LOCAL SET (Bill b IS Bill) DO dateTime(b) <- currentDateTime();
@defineDateTimeAggregation(Bill);

@defineNumberType(bill);

numberDate 'Description' (Bill b) = number(b) + ' from ' + dateTime(b) IN id;

// vendor
vendor 'Vendor' = DATA Partner (Bill);
nameVendor 'Vendor' (Bill b) = name(vendor(b));
CONSTRAINT vendor(Bill b) AND NOT isVendor(vendor(b)) 
                CHECKED BY vendor
                MESSAGE 'The Partner must be a Vendor';

// company
company 'Company' = DATA Company (Bill) NONULL;
nameCompany 'Company' (Bill b) = name(company(b));
WHEN LOCAL SET(Bill b IS Bill) AND NOT CHANGED(company(b)) DO company(b) <- defaultCompany(); 

// payment
paymentTerms = DATA PaymentTerm (Bill); 
namePaymentTerms 'Terms of payment' (Bill b) = name(paymentTerms(b));

dueDateTime 'Pay before' = DATA DATETIME (Bill);

WHEN LOCAL CHANGED(vendor(Bill b)) AND NOT CHANGED(paymentTerms(b)) DO paymentTerms(b) <- vendorPaymentTerms(vendor(b)); 

WHEN LOCAL (SETCHANGED(paymentTerms(Bill b)) OR SETCHANGED(dateTime(b))) AND paymentTerms(b) AND NOT CHANGED(dueDateTime(b)) DO {
    dueDateTime(b) <- sumDay(dateTime(b), days(paymentTerms(b)));
}

// partner account
vendorAccount 'Vendor invoice' = DATA Account (Bill);
nameVendorAccount 'Vendor invoice' (Bill b) = name(vendorAccount(b));
WHEN LOCAL CHANGED (vendor(Bill b)) DO vendorAccount(b) <- defaultAccount(vendor(b));

CONSTRAINT vendorAccount(Bill b) AND NOT vendor(b) = holder(vendorAccount(b))
    CHECKED BY vendorAccount
    MESSAGE 'The account must belong to the selected Partner';

// company account
companyAccount 'Company account' = DATA Account (Bill);
nameCompanyAccount 'Company account' (Bill b) = name(companyAccount(b));
WHEN LOCAL CHANGED(company(Bill b)) DO companyAccount(b) <- defaultAccount(company(b));

CONSTRAINT companyAccount(Bill b) AND NOT company(b) = holder(companyAccount(b))
    CHECKED BY companyAccount
    MESSAGE 'The account must belong to the selected company';

vendorReference 'Код поставщика' = DATA STRING[30] (Bill);
note 'Note' = DATA ISTRING[50] (Bill);

// lines
CLASS BillLine 'Purchase line';

bill 'Purchase' = DATA Bill (BillLine) NONULL DELETE;

index 'No' = PARTITION SUM 1 ORDER BillLine l BY bill(l) IN id MATERIALIZED CHARWIDTH 3;

item 'Items' = DATA Item (BillLine) NONULL;
nameItem 'Items' (BillLine l) = name(item(l)) IN id;
idBarCodeItem 'Barcode' (BillLine l) = idBarCode(item(l));
idItem 'Code' (BillLine l) = id(item(l));

countProductLines 'Number of lines with Products' (Bill b) = GROUP SUM 1 IF bill(BillLine l) = b AND item(l) IS Product;
countServiceLine 'Number of lines with Services' (Bill b) = GROUP SUM 1 IF b = bill(BillLine bl) AND item(bl) IS Service;

CONSTRAINT item(BillLine l) AND NOT canBePurchased(item(l))
            CHECKED BY item 
            MESSAGE 'The item is not intended for purchase';

uom (BillLine l) = uom(item(l));
nameUom 'UOM name' (BillLine l) = name(uom(l));

description 'Description' = DATA STRING (BillLine); 

quantity 'Quantity' = DATA NUMERIC[16,3] (BillLine) NONULL;
price 'Price' = DATA NUMERIC[10,2] (BillLine) NONULL;

defaultPrice = ABSTRACT CASE NUMERIC[10,2] (BillLine);
WHEN LOCAL SETCHANGED(item(BillLine l)) AND NOT CHANGED(price(l)) DO price(l) <- defaultPrice(l);

defaultPrice (BillLine l) += WHEN cost(item(l), DATE(dateTime(bill(l)))) THEN cost(item(l)); 

// taxes
@defineTaxCalc(bill, b, purchase);
taxIncluded (BillLine l) += taxIncluded(type(bill(l)));

// Line properties
nameStatus 'Status' (BillLine l) = nameStatus(bill(l));
dateTime 'Date' (BillLine l) = dateTime(bill(l));
number 'Room' (BillLine l) = number(bill(l));
numberDate 'Description' (BillLine l) = numberDate(bill(l));
vendor (BillLine l) = vendor(bill(l));
nameVendor 'Vendor' (BillLine l) = nameVendor(bill(l));
nameCompany 'Company' (BillLine l) = nameCompany(bill(l));

FORM billLines 'Acquisition lines'
    OBJECTS l = BillLine
    PROPERTIES(l) READONLY dateTime, number, index, nameItem, quantity, price
    PROPERTIES(l) NEWSESSION EDIT
    
    LIST BillLine OBJECT l
;

edit (BillLine l) + { edit(bill(l)); } 

FORM bill 'Purchase'
    OBJECTS  b = Bill PANEL 
    PROPERTIES(b) nameType, dateTime, number, 
                  nameVendor, nameCompany,
                  namePaymentTerms, dueDateTime, nameVendorAccount, nameCompanyAccount,
                  vendorReference, note
        
    OBJECTS l = BillLine
    PROPERTIES(l) index, nameItem, description, nameUom, idBarCodeItem, idItem, 
                  quantity, price, taxes ON CHANGE changeTax(l), NEW, DELETE 
    FILTERS bill(l) = b

    EDIT Bill OBJECT b
;

DESIGN bill {
    caption = (CONCAT ' ', 'Purchase', 'No' + number(b), 'from ' + dateTime(b));
    OBJECTS {
        NEW header {
            alignment = STRETCH;    
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(b)) { notNull = TRUE; }
                MOVE PROPERTY(dateTime(b));
                MOVE PROPERTY(number(b));
            }
            NEW headerRight {
                MOVE PROPERTY(nameVendor(b));
                MOVE PROPERTY(nameCompany(b)) { notNull = TRUE; }           
            }
            NEW relatedDoc {
                fill = 1;
                type = TABBED;
            }
        }
        NEW details {
            fill = 5;
            type = TABBED;
            NEW lines {
                caption = 'Strings';
                MOVE BOX(l) { 
                    fill = 3;
                    PROPERTY(nameItem(l)) { notNull = TRUE; } 
                }
                NEW linesFooter {                     
                    type = CONTAINERH;
                    alignment = STRETCH;
                }
            }
            NEW otherInformation {
                caption = 'other information';
                type = COLUMNS;
                columns = 2;
                NEW payment {
                    caption = 'Payment';
                    alignment = STRETCH;
                    MOVE PROPERTY(namePaymentTerms(b)); 
                    MOVE PROPERTY(dueDateTime(b)); 
                    MOVE PROPERTY(nameCompanyAccount(b));
                    MOVE PROPERTY(nameVendorAccount(b));              
                }           
                NEW billInformat {
                    caption = 'Others';
                    alignment = STRETCH;
                    MOVE PROPERTY(vendorReference(b)); 
                    MOVE PROPERTY(note(b));
                }
            }
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

@defineDocHistory(bill, b, item, quantity);
@defineDocSearch(bill, item, quantity, 'Quantity', b, canBePurchased);
@defineBarCodeSearch(bill, b, l, item, quantity);

FORM bills 'Purchases'
    OBJECTS b = Bill
    PROPERTIES(b) READONLY nameType, dateTime, number, 
                           nameVendor, nameCompany,
                           namePaymentTerms, dueDateTime, nameVendorAccount, nameCompanyAccount,
                           vendorReference, note
    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE
           
    LIST Bill OBJECT b
;

@defineTaxForm(bill, b);
@defineDocStatusForm(bill, b);
@defineDocLinesCount(bill, b);
@defineDateFilterForm(bills, b);

NAVIGATOR {
    operations {
        NEW bills FIRST;
    }
}

// copy
copy 'Copy' (Bill b)  { 
    NEWSESSION {
        NEW nb = Bill {
            vendor(nb) <- vendor(b);
            note(nb) <- note(b);
            FOR bill(BillLine l) = b INLINE NEW nl = BillLine DO {
                bill(nl) <- nb;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                price(nl) <- price(l);
            }
            SHOW bill OBJECTS b = nb DOCKED;
        }
    }
}
EXTEND FORM bill PROPERTIES(b) copy;

DESIGN bill {
    secondaryActions {
        MOVE PROPERTY(copy(b)); 
    }
}