MODULE PurchasePricelist;

REQUIRE ItemPurchase, PartnerPurchase, PurchaseSettings, BarCode, Doc;

NAMESPACE Purchase; 

CLASS Pricelist 'Vendor price list';

@defineDocStatus(pricelist, 'Vendor price list');

startDateTime 'Start of action' = DATA DATETIME (Pricelist);
startDateTime(Pricelist l) <- currentDateTime() WHEN SET(l IS Pricelist);
 
endDateTime 'End of action' = DATA DATETIME (Pricelist);

@defineNumber(pricelist, 'Vendor price lists', 'PL');

numberDate 'Description' (Pricelist p) = number(p) + ' from ' + startDateTime(p) IN id;

note 'Note' = DATA STRING[50] (Pricelist);

vendor 'Vendor ' = DATA Partner (Pricelist);
nameVendor 'Vendor '(Pricelist p) = name(vendor(p));

// lines
CLASS PricelistLine 'Items';

pricelist 'Price List' = DATA Pricelist (PricelistLine) NONULL DELETE;

index 'No' = PARTITION SUM 1 ORDER PricelistLine l BY pricelist(l) IN id MATERIALIZED CHARWIDTH 3;

item 'Items' = DATA Item (PricelistLine);
nameItem 'Items' (PricelistLine l) = name(item(l));
idBarCodeItem 'Barcode' (PricelistLine l) = idBarCode(item(l)); 
idItem 'Code' (PricelistLine l) = id(item(l)); 

uom (PricelistLine l) = uom(item(l));
nameUom 'UOM name' (PricelistLine l) = name(uom(l)); 

nameItemVendor 'Vendor name' = DATA STRING[200] (PricelistLine);
codeItemVendor 'Vendor code' = DATA STRING[20] (PricelistLine);

price 'Price' = DATA NUMERIC[10,2] (PricelistLine);

// Line properties
nameStatus 'Status' (PricelistLine prl) = nameStatus(pricelist(prl));
number 'Room' (PricelistLine prl) = number(pricelist(prl));
numberDate 'Description' (PricelistLine l) = numberDate(pricelist(l));
startDateTime 'Start of action' (PricelistLine prl) = startDateTime(pricelist(prl));
endDateTime 'End of action' (PricelistLine prl) = endDateTime(pricelist(prl));
nameVendor 'Vendor' (PricelistLine prl) = nameVendor(pricelist(prl));
note 'Note' (PricelistLine prl) = note(pricelist(prl));

FORM pricelist 'Vendor price list'
    OBJECTS p = Pricelist PANEL
    PROPERTIES(p) number, startDateTime, endDateTime, nameVendor, note
    
    OBJECTS l = PricelistLine
    PROPERTIES(l) index READONLY, nameItem, nameUom READONLY, nameItemVendor, codeItemVendor,
                  idBarCodeItem, idItem, price
    PROPERTIES(l) NEW, DELETE 
    FILTERS pricelist(l) = p
    
    EDIT Pricelist OBJECT p
;

DESIGN pricelist {
    caption = (CONCAT ' ', 'Vendor price list', 'No' + number(p), 'from ' + startDateTime(p));
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            alignment = STRETCH;
            NEW headerLeft {
                MOVE PROPERTY(number(p));
                NEW period {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    MOVE PROPERTY(startDateTime(p)) { caption = 'Valid from'; }
                    MOVE PROPERTY(endDateTime(p)) { caption = 'by '; }                
                }
                MOVE PROPERTY(nameVendor(p));
                MOVE PROPERTY(note(p));
            }
            NEW relatedDoc {
                fill = 1;
                type = TABBED;
            }
        }
        NEW details {
            fill = 1;
            type = TABBED;
            MOVE BOX(l);
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

@defineDocSearch(pricelist, item, price, 'Price', p, canBePurchased);

FORM pricelists 'Vendor price lists'
    OBJECTS p = Pricelist
    PROPERTIES(p) READONLY startDateTime, endDateTime, number, nameVendor, note
    PROPERTIES(p) NEWSESSION NEW, EDIT, DELETE 

    LIST Pricelist OBJECT p
;  

@defineDocStatusForm(pricelist, p);
@defineDocLinesCount(pricelist, p);

NAVIGATOR {
    operations {
        NEW pricelists;       
    }
}

// copy
copy 'Copy' (Pricelist pl) {
    NEWSESSION {
        NEW p = Pricelist {
            startDateTime(p) <- startDateTime(pl);
            endDateTime(p) <- endDateTime(pl);
            note(p) <- note(pl);
            vendor(p) <- vendor(pl);
            FOR pricelist(PricelistLine l)  = pl DO NEW nl = PricelistLine {
                pricelist(nl) <- p;
                item(nl) <- item(l);
                price(nl) <- price(l);
                nameItemVendor(nl) <- nameItemVendor(l);
                codeItemVendor(nl) <- codeItemVendor(l);
            }
            SHOW pricelist OBJECTS p = p;
        }
    }
}

EXTEND FORM pricelist
    PROPERTIES(p) copy 
;

DESIGN pricelist {
    secondaryActions {
        MOVE PROPERTY(copy(p)); 
    }
}