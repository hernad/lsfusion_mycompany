MODULE PurchaseOrder;

REQUIRE Time, MetaNumerator, Employee, Company,
        MetaTax, TaxItem, BarCode, PurchaseOrderType,
        PurchaseSettings, PartnerPurchase, 
        ItemSales, ItemCost,
        PaymentTermsPurchase, Doc, DateUtils,
        DebtPartner, LocationEmployee;  

NAMESPACE Purchase;

CLASS Order 'Purchase Order';

@defineDocStatus(order, 'Purchase order');

// type
type 'Type' = DATA OrderType (Order) NONULL;
nameType 'Type' (Order s) = name(type(s));

WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(type(o)) DO type(o) <- defaultOrderType(); 

dateTime 'Date'  = DATA DATETIME (Order);
WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(dateTime(o)) DO { dateTime(o) <- currentDateTime();}
@defineDateTimeAggregation(Order);

@defineNumberType(order);

numberDate 'Description' (Order o) = number(o) + ' from ' + dateTime(o) IN id;

vendor 'Vendor' = DATA Partner (Order) NONULL;
nameVendor 'Vendor' (Order o) = name(vendor(o));

CONSTRAINT vendor(Order o) AND NOT isVendor(vendor(o))
                CHECKED BY vendor[Order]
                MESSAGE 'The Partner of the Purchase order must be Vendor';

addressVendor 'Supplier address' (Order o) = csvAddress(vendor(o));

// Invoicing information
paymentTerms = DATA PaymentTerm (Order);
namePaymentTerms 'Terms of payment' (Order o) = name(paymentTerms(o));

WHEN LOCAL CHANGED(vendor(Order o)) AND NOT CHANGED(paymentTerms(o)) DO paymentTerms(o) <- vendorPaymentTerms(vendor(o)); 

// Shipping information
scheduledDateTime 'Delivery time' = DATA DATETIME (Order);
scheduledDateTime(Order o) <- currentDateTime() WHEN SET(o IS Order);   

// company
company 'Company' = DATA Company (Order) NONULL;
nameCompany 'Company' (Order o) = name(company(o));
WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(company(o)) DO company(o) <- defaultCompany();

location = DATA Location (Order);
nameLocation 'Storage' (Order o) = name(location(o));

// Purchase information
representative 'Our representative' = DATA Employee (Order);
nameRepresentative 'Our representative' (Order o) = MasterData.name(representative(o));

representative(Order o) <- currentUser() IF currentUser() IS Employee WHEN SET(o IS Order);

CONSTRAINT representative(Order o) AND NOT legalEntity(representative(o)) = company(o) 
    CHECKED BY representative MESSAGE 'Should be our worker';

vendorReference 'Incoming vendor number' = DATA STRING[30] (Order);

// Lines
CLASS OrderLine 'Specification';
order =  DATA Order (OrderLine) NONULL  DELETE;

index 'No' = PARTITION SUM 1 ORDER OrderLine l BY order(l) IN id MATERIALIZED CHARWIDTH 3;

item = DATA Item (OrderLine) NONULL;
nameItem 'Items' (OrderLine l) = name(item(l));
idBarCodeItem 'Barcode' (OrderLine l) = idBarCode(item(l));
idItem 'Code' (OrderLine l) = id(item(l));

CONSTRAINT item(OrderLine l) AND NOT canBePurchased(item(l))
            CHECKED BY item[OrderLine] 
            MESSAGE 'The item is not intended for purchase';

description 'Description' = DATA ISTRING (OrderLine);

uom (OrderLine l) = uom(item(l));
nameUom 'UOM name' (OrderLine l) = name(uom(l));

quantity 'Number' = DATA NUMERIC[16,3] (OrderLine);

price 'Price' = DATA NUMERIC[10,2] (OrderLine);

defaultPrice = ABSTRACT CASE NUMERIC[10,2] (OrderLine);
WHEN LOCAL SETCHANGED(item(OrderLine l)) AND NOT CHANGED(price(l)) DO price(l) <- defaultPrice(l);

defaultPrice (OrderLine l) += WHEN cost(item(l), DATE(dateTime(order(l)))) THEN cost(item(l)); 

@defineTaxCalc(order, o, purchase);
taxIncluded (OrderLine l) += taxIncluded(type(order(l)));

WHEN LOCAL CHANGED (item(OrderLine ol)) DO {
    in(ol, Tax t) <- purchaseIn(item(ol),t); 
}

// Line properties
nameStatus 'Status' (OrderLine l) = nameStatus(order(l)); 
type (OrderLine l) = type(order(l)); 

dateTime 'Created by' (OrderLine l) = dateTime(order(l));
number 'Room' (OrderLine l) = number(order(l));
numberDate 'Description' (OrderLine l) = numberDate(order(l));

location 'Storage' (OrderLine l) = location(order(l));
nameLocation 'Storage' (OrderLine l) = location(order(l));

vendor (OrderLine l) = vendor(order(l));
nameVendor 'Vendor' (OrderLine l) = nameVendor(order(l));

edit (OrderLine l) + { edit(order(l)); } 

FORM order 'Purchase Order'
    OBJECTS o = Order PANEL
    PROPERTIES(o) nameType, dateTime, number, nameVendor, nameCompany, nameLocation,
                  namePaymentTerms,
                  scheduledDateTime,
                  nameRepresentative, vendorReference
    PROPERTIES(o) READONLY untaxedAmount, taxAmount, amount
                 
    OBJECTS l = OrderLine
    PROPERTIES(l) index, nameItem, description, nameUom, idBarCodeItem, idItem, quantity, price, untaxedAmount, taxes ON CHANGE changeTax(l)
    PROPERTIES(l) NEW, DELETE
    FILTERS order(l) = o
     
    EDIT Order OBJECT o    
;      

DESIGN order {
    caption = (CONCAT ' ', 'Purchase Order', 'No' + number(o), 'from ' + dateTime(o));
    OBJECTS {
        NEW header {
            alignment = STRETCH;    
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(o)) { notNull = TRUE; }
                MOVE PROPERTY(dateTime(o));
                MOVE PROPERTY(number(o));
            }
            NEW headerRight {
                MOVE PROPERTY(nameVendor(o)) { notNull = TRUE; } 
                MOVE PROPERTY(nameCompany(o)) { notNull = TRUE; }
                MOVE PROPERTY(nameLocation(o));
            }
            NEW relatedDoc {
                fill = 1;
                type = TABBED;
            }                                            
        }
        NEW details {
            fill = 7;
            type = TABBED;
            MOVE BOX(l);
            NEW otherInformation {
                caption = 'other information';
                type = COLUMNS;
                columns = 2;
                NEW invoicing {
                    caption = 'Calculations';
                    alignment = STRETCH;
                    MOVE PROPERTY(namePaymentTerms(o));                         
                }
                NEW shippingInformation {
                    caption = 'Supply';
                    alignment = STRETCH;
                    MOVE PROPERTY(scheduledDateTime(o));
                }
                NEW purchaseInformation {
                    caption = 'Others';
                    alignment = STRETCH;
                    MOVE PROPERTY(nameRepresentative(o));
                    MOVE PROPERTY(vendorReference(o));
                }
            }            
        }
        NEW footer {
            align = END;
            type = CONTAINERH; 
            NEW total {
                caption = 'Total';
                type = CONTAINERH;
                MOVE PROPERTY(untaxedAmount(o));
                MOVE PROPERTY(taxAmount(o));
                MOVE PROPERTY(amount(o));                     
            }
        }
    }        
}

@defineDocHistory(order, o, item, quantity);

FORM orders 'Purchase orders'
    OBJECTS o = Order
    PROPERTIES(o) READONLY nameType, dateTime, number, nameVendor,
                           namePaymentTerms,
                           scheduledDateTime, nameLocation,
                           nameRepresentative, vendorReference,
                           untaxedAmount, taxAmount, amount     
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
;

@defineDocStatusForm(order, o);
@defineDocLinesCount(order, o);
@defineDocLocationAccess(order, o);
@defineDateFilterForm(orders, o);

NAVIGATOR {
    operations {
        NEW orders FIRST;    
    }
}

copy 'Copy' (Order o)  { 
    NEWSESSION {
        NEW no = Order {
            type(no) <- type(o);
            vendor(no) <- vendor(o);
            paymentTerms(no) <- paymentTerms(o);
            company(no) <- company(o);
            location(no) <- location(o);
            representative(no) <- representative(o); 
            FOR order(OrderLine l) = o INLINE NEW nl = OrderLine DO {
                order(nl) <- no;
                item(nl) <- item(l);
                description(nl) <- description(l);
                
                quantity(nl) <- quantity(l);
                
                price(nl) <- price(l);
            }
            SHOW order OBJECTS o = no DOCKED;
        }
    }
}

EXTEND FORM order PROPERTIES copy(o);

DESIGN order {
    secondaryActions {
        MOVE PROPERTY(copy(o));
    }
}