MODULE Session;

REQUIRE MetaNumerator, Time, DateUtils, 
        RetailSettings, Pos;

NAMESPACE Retail;

CLASS Session 'Shift';

openingDateTime 'Open' = DATA DATETIME (Session) NONULL;
openingDateTime(Session s) <- currentDateTime() WHEN SET(s IS Session);
@defineDateTimeAggregation(Session, opening, ' discoveries');

closingDateTime 'Closed' = DATA DATETIME (Session);
CONSTRAINT closingDateTime(Session s) < openingDateTime(s)
    MESSAGE 'The shift cannot be closed earlier than it was open';

opened 'Open' (Session s) = openingDateTime(s) AND NOT closingDateTime(s);

@defineNumber(session, 'Shifts', 'SH');

numberDate 'Description' (Session s) = number(s) + ' from ' + openingDateTime(s) IN id;

pos 'POS' = DATA Pos (Session) NONULL;
namePos 'POS' (Session s) = name(pos(s));

// opened
openedSession (Pos p) = GROUP AGGR Session s WHERE opened(s) BY pos(s);

FORM session 'Shift'
    OBJECTS s = Session PANEL
    PROPERTIES(s) namePos, number, 
                  openingDateTime, closingDateTime
    
    EDIT Session OBJECT s
;

DESIGN session {
    OBJECTS {
        NEW header {
            NEW title {
                type = CONTAINERH;
                alignment = STRETCH;
                MOVE PROPERTY(namePos(s));
                MOVE PROPERTY(number(s));
            }
            NEW period {
                type = CONTAINERH;
                alignment = STRETCH;
                MOVE PROPERTY(openingDateTime(s));
                MOVE PROPERTY(closingDateTime(s));
            }
        }
        NEW tabPane {
            fill = 1;
            type = TABBED;
        }
    }
}

FORM sessions 'Shifts'
    OBJECTS o = Session
    PROPERTIES(o) READONLY openingDateTime, closingDateTime, number, namePos
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
    
    LIST Session OBJECT o
;

@defineDateFilterForm(sessions, o, opening);

NAVIGATOR {
    operations {
        NEW sessions;
    }
}

// actions
afterOpen ABSTRACT LIST (Session);
openSession 'Open shift' (Pos p) {
    CANCEL;

    NEWSESSION {
        IF NOT openedSession(p) THEN
            NEW s = Session {
                pos(s) <- p;
                APPLY;
                IF NOT canceled() THEN
                    afterOpen(s);
            }
        ELSE
            MESSAGE 'There is already an open shift';
    }
}

afterClose ABSTRACT LIST (Session);
close 'Close shift' (Session s) {
    CANCEL;

    NEWSESSION {
        closingDateTime(s) <- currentDateTime();
        APPLY;
        IF NOT canceled() THEN
            afterClose(s);
    }
} CONFIRM;