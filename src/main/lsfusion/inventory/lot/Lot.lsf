MODULE Lot;

REQUIRE InventorySettings, Product;

NAMESPACE Inventory;

CLASS Lot 'Party';

id 'Code' = DATA STRING[100] (Lot) CHARWIDTH 15;
lot (STRING[100] id) = GROUP AGGR Lot o BY id(o);

product 'Product' = DATA Product (Lot) NONULL INDEXED;
nameProduct 'Product' (Lot l) = name(product(l)) IN id;

useLot 'Lot accounting' = DATA BOOLEAN ();

EXTEND FORM options 
    PROPERTIES useLot()
;

DESIGN options {
    commons {
        MOVE PROPERTY(useLot());
    }
} 

META defineDocLot (doc, item, quantity, status, caption)
    quantity 'Quantity'##caption = DATA NUMERIC[16,3] (###doc##Line, Lot);
    
    lots###quantity 'Party' (###doc##Line l) = 
        GROUP CONCAT
            (CONCAT '', id(Lot lot) IF quantity(l, lot), '(' + (STRING(DOUBLE(quantity(l, lot))) IF (quantity(l, lot) != 1)) + ')'), 
            ',' CHARWIDTH 15; 
    
    quantity##Lot 'Кол-во партий'##caption (###doc##Line rl) = GROUP SUM quantity(rl, Lot l);
       
    WHEN LOCAL CHANGED(quantity##Lot(###doc##Line rl)) AND NOT status(doc(rl)) DO {
        quantity(rl) <- quantity##Lot(rl);
    }
    
    CONSTRAINT quantity(###doc##Line rl, Lot l) AND item(rl) != product(l)
                    MESSAGE 'The line for the batch must refer to the same product as the batch';
    CONSTRAINT useLot(item(###doc##Line rl)) AND ((OVERRIDE quantity(rl), 0.0) - quantity##Lot(rl) < 0) AND status(doc(rl))
                    MESSAGE 'Несовпадение количества с количеством в партиях'##caption;                   
END 

META defineDocBarCodeLot (doc, item, quantity)
    
    beforeProcessLotBarCode ABSTRACT (###doc, STRING);
    afterProcessLotBarCode ABSTRACT (###doc, STRING);
       
    processBarCode(###doc r, ###doc##Line rl, STRING s) + {
        IF lot(s) OR useLot(item(rl)) THEN {
            beforeProcessLotBarCode(r, s);
            
            IF NOT lot(s) THEN
                RETURN;
                 
            IF NOT product(lot(s)) THEN {
                product(lot(s)) <- item(rl);
            }
        
            LOCAL line = ###doc##Line();
            
            IF product(lot(s)) AND NOT product(lot(s)) = item(rl) THEN {
                IF NOT last###doc##Line(doc(rl), product(lot(s))) THEN {
                    NEW l = ###doc##Line {
                        doc(l) <- r;
                        item(l) <- product(lot(s));
                    }
                }                
                line() <- last###doc##Line(doc(rl), product(lot(s)));
                SEEK doc.l = line();            
            } ELSE
                line() <- rl;                      
                
            quantity(line(), lot(s)) <- quantity(line(), lot(s)) (+) 1;
                    
            afterProcessLotBarCode(r, s);
            
            consumedBarCode() <- TRUE;
        }
    }
END

META defineDocDesignLotTab(doc, quantity)
    EXTEND FORM doc
        PROPERTIES(l) AFTER quantity(l) SHOWIF useLot() BACKGROUND RGB(198,230,247) IF useLot(product(l)) 
                      quantity##Lot 
        
        OBJECTS lot = Lot
        PROPERTIES (lot) id READONLY
        PROPERTIES (l, lot) quantity READONLYIF NOT useLot(product(lot))
        FILTERS quantity(l, lot)   
    ;
    
    DESIGN doc {
        linesTab {
            MOVE BOX(lot) {
                caption = 'Party';
                showIf = useLot();
            }
        }
    }
    
    afterProcessLotBarCode(###doc d, STRING s) + {
        SEEK doc.lot = lot(s);
        ACTIVATE TAB doc.BOX(lot);
        ACTIVATE PROPERTY doc.quantity(l, lot); 
    }    
END

META defineLotCodeSearch(doc, quantity)
    ##doc##LotCode 'Party' = DATA LOCAL STRING ();
    
    processLotCode ABSTRACT (###doc, STRING);
    
    searchLotCode(###doc##Line rl) {
        INPUT id = STRING DO {
            IF lot(id) OR useLot(product(rl)) THEN {        
                processLotCode (doc(rl), id);
                            
                IF NOT product(lot(id)) THEN {
                    product(lot(id)) <- product(rl);
                }
                
                IF product(lot(id)) != product(rl) THEN {
                    MESSAGE 'The batch refers to another product (' + name(product(lot(id))) +')';
                } ELSE {                
                    quantity(rl, lot(id)) <- quantity(rl, lot(id)) (+) 1;
                    SEEK doc.lot = lot(id);
                    ACTIVATE PROPERTY doc.quantity(l, lot);                 
                }          
            }
        }
    }
    
    EXTEND FORM doc
        PROPERTIES() ##doc##LotCode DRAW lot TOOLBAR ON CHANGE searchLotCode(l) READONLYIF NOT useLot(product(l));
END