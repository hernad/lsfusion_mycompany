MODULE Shipment;

REQUIRE System, Time, DateUtils,
        InventorySettings, LocationEmployee, Partner, Product,
        ShipmentType, ItemSales, PartnerSales, BarCode, Doc, ResLedger;

NAMESPACE Inventory;

CLASS Shipment 'Shipment';

@defineDocStatus(shipment, 'shipment');

immediate 'Unplanned' = DATA BOOLEAN (Shipment);

// type
type 'Type' = DATA ShipmentType (Shipment) NONULL;
nameType 'Type' (Shipment s) = name(type(s));

WHEN LOCAL SET(Shipment s IS Shipment) AND NOT CHANGED(type(s)) DO type(s) <- defaultShipmentType(); 

scheduledDateTime 'Planned date' = DATA DATETIME (Shipment) NONULL IN id;
scheduledDateTime(Shipment s) <- currentDateTime() WHEN SET(s IS Shipment);
@defineDateTimeAggregation(Shipment, scheduled, ' the planned');

@defineNumberType(shipment);

numberDate 'Description' (Shipment s) = number(s) + ' from ' + scheduledDateTime(s) IN id;

// locations
location 'Storage location (from where)' = DATA Location (Shipment) NONULL INDEXED;
nameLocation 'Storage location (from where)' (Shipment s) = name(location(s));
WHEN LOCAL SETCHANGED(type(Shipment s)) AND defaultLocation(type(s)) AND NOT CHANGED(location(s)) DO location(s) <- defaultLocation(type(s));  

toLocation 'Storage location (where)' = DATA Location (Shipment);
nameToLocation 'Storage location (where)' (Shipment s) = name(toLocation(s));
WHEN LOCAL SETCHANGED(type(Shipment s)) AND defaultToLocation(type(s)) AND NOT CHANGED(toLocation(s)) DO toLocation(s) <- defaultToLocation(type(s));  

CONSTRAINT location(Shipment s) = toLocation(s)
    CHECKED BY toLocation[Shipment]
    MESSAGE 'Where and where storage locations cannot coincide';

// transfer
WHEN SETCHANGED(type(Shipment s)) AND NOT isTransfer(type(s)) DO toLocation(s) <- NULL;
CONSTRAINT isTransfer(type(Shipment s)) AND NOT toLocation(s) MESSAGE 'Storage location (where) for moving is not specified';

// customer
customer = DATA Partner (Shipment) INDEXED;
nameCustomer 'Customer' (Shipment s) = name(customer(s));

CONSTRAINT customer(Shipment s) AND NOT isCustomer(customer(s)) 
                CHECKED BY customer[Shipment]
                MESSAGE 'The Partner must be the Customer';

note 'Note' = DATA ISTRING[50] (Shipment);

// lines
CLASS ShipmentLine 'Shipment line';

shipment 'Document' = DATA Shipment (ShipmentLine) NONULL DELETE INDEXED IN id;

countLines 'Number of lines' (Shipment s) = GROUP SUM 1 IF shipment(ShipmentLine l) = s MATERIALIZED;
index 'No' = PARTITION SUM 1 ORDER ShipmentLine l BY shipment(l) IN id MATERIALIZED CHARWIDTH 3;

product 'Product' = DATA Product (ShipmentLine) NONULL INDEXED;
nameProduct 'Product' (ShipmentLine l) = name(product(l)) IN id;
idBarCodeProduct 'Barcode' (ShipmentLine l) = idBarCode(product(l));
idProduct 'Code' (ShipmentLine l) = id(product(l));

CONSTRAINT product(ShipmentLine l) AND NOT canBeSold(product(l))
            CHECKED BY product[ShipmentLine] 
            MESSAGE 'This product is not for sale';

uom (ShipmentLine l) = uom(product(l));
nameUom 'UOM name' (ShipmentLine l) = name(uom(l));

initialDemand 'Planned quantity' = DATA NUMERIC[16,3] (ShipmentLine);

CONSTRAINT initialDemand(ShipmentLine l) < 0 OR initialDemand(l) > maxQuantity(type(shipment(l))) AND maxQuantity(type(shipment(l))) 
    MESSAGE 'The initial amount must be between 0 and the maximum allowed';

// line properties
nameStatus 'Status' (ShipmentLine l) = nameStatus(shipment(l));
scheduledDateTime 'Planned date' (ShipmentLine l) = scheduledDateTime(shipment(l)) IN id;
number 'Room' (ShipmentLine l) = number(shipment(l)) IN id;
numberDate 'Description' (ShipmentLine l) = numberDate(shipment(l));
customer (ShipmentLine l) = customer(shipment(l));
nameCustomer 'Customer' (ShipmentLine l) = nameCustomer(shipment(l));
location (ShipmentLine l) = location(shipment(l));
nameLocation 'Storage' (ShipmentLine l) = nameLocation(shipment(l));

FORM shipmentLines 'Shipping lines'
    OBJECTS l = ShipmentLine
    PROPERTIES(l) READONLY scheduledDateTime, number, index, nameProduct

    LIST ShipmentLine OBJECT l
;

edit (ShipmentLine l) + { edit(shipment(l)); } 

FORM shipment 'Shipment'
    OBJECTS s = Shipment PANEL 
    PROPERTIES(s) nameType, scheduledDateTime, number, 
                  nameCustomer SHOWIF NOT isTransfer(type(s)), nameLocation, nameToLocation SHOWIF isTransfer(type(s)), 
                  note
                  
    OBJECTS l = ShipmentLine
    PROPERTIES(l) index READONLY, nameProduct, nameUom, idBarCodeProduct, idProduct, 
                  initialDemand SHOWIF NOT immediate(s) BACKGROUND IF status(shipment(l)) = ShipmentStatus.draft THEN RGB(198,230,247) 
    PROPERTIES(l) NEW, DELETE
    FILTERS shipment(l) = s
             
    EDIT Shipment OBJECT s
;

DESIGN shipment {
    caption = (CONCAT ' ', 'Shipment', 'No' + number(s), 'from ' + scheduledDateTime(s));
    OBJECTS {       
        NEW header {
            NEW headerCenter {
                alignment = STRETCH;
                type = CONTAINERH;
                NEW headerLeft {
                    MOVE PROPERTY(nameType(s)) { notNull = TRUE; }
                    MOVE PROPERTY(scheduledDateTime(s));
                    MOVE PROPERTY(number(s));
                }
                NEW headerRight {
                    MOVE PROPERTY(nameCustomer(s));
                    MOVE PROPERTY(nameLocation(s)) { notNull = TRUE; }           
                    MOVE PROPERTY(nameToLocation(s)) { notNull = TRUE; }           
                }
            }
            NEW headerBottom {
                alignment = STRETCH;
                MOVE PROPERTY(note(s));           
            }
        }
        NEW details {
            fill = 5;
            type = TABBED;
            NEW lines {
                caption = 'Strings';
                MOVE BOX(l) {
                    PROPERTY(nameProduct(l)) { notNull = TRUE; }
                    PROPERTY(initialDemand(l)) { notNull = TRUE; }
                }
                NEW linesTab {
                    fill = 0.3;
                    type = TABBED;
                }                
            }                  
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

@defineDocHistory(shipment, s, product, initialDemand);

// shipments
background (Shipment s) = ABSTRACT CASE COLOR (Shipment);

FORM shipments 'Shipments'
    OBJECTS s = Shipment
    PROPERTIES(s) READONLYIF isReadonly() BACKGROUND background(s)
                           nameType, scheduledDateTime, number, 
                           nameCustomer, nameLocation, nameToLocation,
                           note, countLines
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE
;

@extendFormEditable(shipments);

@defineDocObjectsForm(shipments, s, 'Shipments');
@defineDocStatusForm(shipment, s);
@defineDocLocationAccess(shipment, s);

NAVIGATOR {
    operations {
        NEW shipments;
    }
}

// immediate
immediateShipment 'Unplanned shipment' () {
    NEWSESSION {
        NEW s = Shipment {
            immediate(s) <- TRUE;
            SHOW shipment OBJECTS s = s DOCKED;
        }
    }
} IMAGE 'add.png';

EXTEND FORM shipments 
    PROPERTIES immediateShipment() DRAW s TOOLBAR
;

// copy
clone(Shipment to, Shipment from) {
    type(to) <- type(from);
    location(to) <- location(from);
    toLocation(to) <- toLocation(from);
    note(to) <- note(from);
    immediate(to) <- immediate(from);
    FOR shipment(ShipmentLine l) = from INLINE NEW nl = ShipmentLine DO {
        shipment(nl) <- to;
        product(nl) <- product(l);
        initialDemand(nl) <- initialDemand(l);
    }
}

copy 'Copy' (Shipment from)  { 
    NEWSESSION {
        NEW to = Shipment {
            clone(to, from);
            SHOW shipment OBJECTS s = to DOCKED;
        }
    }
}

EXTEND FORM shipment
    PROPERTIES(s) copy
;

DESIGN shipment {
    secondaryActions {
        MOVE PROPERTY(copy(s)); 
    }
}