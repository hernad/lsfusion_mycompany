MODULE Location;

REQUIRE InventorySettings, Company, MetaNumerator, Selection;

NAMESPACE Inventory;

CLASS Location 'Storage';

@defineID(location, 'Storage locations', 'МХ', 4);

name 'Name' = DATA ISTRING[30] (Location) IN id NONULL CHARWIDTH 15;

// hierarchy
parent 'Parent' = DATA Location (Location);
idParent 'Parent code' (Location l) = id(parent(l));
nameParent 'Parent' (Location l) = name(parent(l));

CONSTRAINT DROPPED(Location l IS Location) AND PREV(parent(Location cl) = l)
        MESSAGE 'You cannot delete a storage location that has subordinate warehouses';

level 'Level' (Location child, Location parent) =
   RECURSION 1l IF child IS Location AND parent = child
        STEP 2l IF parent = parent($parent) MATERIALIZED;

isChild (Location child, Location parent) = TRUE IF level(child, parent);

countChildren (Location parent) = GROUP SUM 1 IF parent(Location child) = parent;

canonicalName 'Canonical name' (Location l) =
   GROUP CONCAT name(Location parent), ' / ' ORDER DESC level(l, parent) CHARWIDTH 20 IN id;
canonicalNameParent 'Parent' (Location l) = canonicalName(parent(l));

// company
company 'Owner' = DATA Company (Location); 
idCompany 'Owner code' (Location l) = id(company(l)); 
nameCompany 'Owner' (Location l) = name(company(l)); 

WHEN LOCAL SET(Location l IS Location) AND NOT CHANGED(company(l)) DO company(l) <- defaultCompany();

// address
address 'Address' = DATA ISTRING[50] (Location);
city 'City' = DATA ISTRING[30] (Location);
state 'Region' = DATA ISTRING[30] (Location);
zip 'Postcode' = DATA ISTRING[10] (Location);

hierarchyAddress (Location l) = GROUP LAST address(Location parent) ORDER DESC level(l,parent);
hierarchyCity (Location l) = GROUP LAST city(Location parent) ORDER DESC level(l,parent);
hierarchyState  (Location l) = GROUP LAST state(Location parent) ORDER DESC level(l,parent);
hierarchyZip  (Location l) = GROUP LAST zip(Location parent) ORDER DESC level(l,parent);

csvAddress 'Address' (Location l) = CONCAT ', ', hierarchyAddress(l), hierarchyCity(l), hierarchyState(l), hierarchyZip(l);
linesAddress 'Address' (Location l) = CONCAT '\n', hierarchyAddress(l), hierarchyCity(l), hierarchyState(l), hierarchyZip(l);
  
FORM location 'Storage'
    OBJECTS l = Location PANEL
    PROPERTIES(l) name, id, 
                  canonicalNameParent, nameCompany,
                  address, city, state, zip
     
    EDIT Location OBJECT l  
;

DESIGN location {
    OBJECTS {
        NEW pane {
            NEW id {
                type = CONTAINERH;
                MOVE PROPERTY(name(l));
                MOVE PROPERTY(id(l));
            }
            MOVE PROPERTY(canonicalNameParent(l));
            MOVE PROPERTY(nameCompany(l));
            NEW address {
                type = COLUMNS;
                columns = 2;
                MOVE PROPERTY(address(l));
                MOVE PROPERTY(city(l));
                MOVE PROPERTY(state(l));
                MOVE PROPERTY(zip(l));
            }
            NEW params {
                type = COLUMNS;
                columns = 2;
            }
            NEW tabbedPane {
                type = TABBED;
                fill = 1;
            }
        }
    }
}

background (Location l) = ABSTRACT CASE COLOR (Location);
FORM locations 'Storage locations'
    OBJECTS l = Location
    PROPERTIES(l) READONLY BACKGROUND background(l)
                           name, id, 
                           canonicalNameParent, nameCompany,
                           address, city, state, zip
    PROPERTIES(l) NEWSESSION NEW, EDIT, DELETE
    
    TREE locations lt = Location PARENT parent(lt)
    PROPERTIES(lt) READONLY name, id, canonicalNameParent, nameCompany, address, city, state, zip
    PROPERTIES(lt) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(lt)
    
    LIST Location OBJECT l
    
    EVENTS ON CHANGE lt { SEEK locations.l = lt; }
;

DESIGN locations {
    OBJECTS {
        type = TABBED;
        NEW list {
            caption = 'List';
            MOVE BOX(l);
        }
        NEW tree {
            caption = 'Tree';
            MOVE BOX(TREE locations);
        }
    }
}

NAVIGATOR {
    settings {
        NEW locations;
    }
}