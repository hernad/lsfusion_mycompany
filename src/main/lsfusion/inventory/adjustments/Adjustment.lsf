MODULE Adjustment;

REQUIRE InventorySettings, LocationEmployee, 
        Product, InvLedger, DateUtils,
        Company, BarCode, Doc;
                                  
NAMESPACE Inventory;

CLASS Adjustment 'Inventory';

@defineDocStatus(adjustment, 'inventory');

dateTime 'Date' = DATA DATETIME (Adjustment);
WHEN LOCAL SET(Adjustment a IS Adjustment) AND NOT CHANGED(dateTime(a)) DO dateTime(a) <- currentDateTime();
@defineDateTimeAggregation(Adjustment);

@defineNumber(adjustment, 'Inventories', 'IV');

numberDate 'Description' (Adjustment a) = number(a) + ' from ' + dateTime(a) IN id;

DESIGN options {
    commons {
        MOVE PROPERTY(nameNumeratorAdjustment());
    }
}

location 'Storage' = DATA Location (Adjustment) NONULL;
nameLocation 'Storage' (Adjustment a) = name(location(a));

// type
CLASS AdjustmentType 'Inventory type' {
    all 'All',
    category 'By category',
    manual 'Manually'
}
name 'Name' (AdjustmentType o) = ISTRING[100](staticCaption(o)) IF o IS AdjustmentType CHARWIDTH 15;

FORM type 'Inventory type'
    OBJECTS t = AdjustmentType PANEL
    PROPERTIES(t) 'Inventory type' = name
    
    EDIT AdjustmentType OBJECT t  
;

type 'Type' =  DATA AdjustmentType (Adjustment) NONULL;
nameType 'Inventory type' (Adjustment a) = name(type(a));

category 'Category' = DATA Category (Adjustment);
nameCategory 'Category' (Adjustment a) = name(category(a));

note 'Note' = DATA ISTRING[50] (Adjustment);

// lines
CLASS AdjustmentLine 'Inventory line';

adjustment = DATA Adjustment (AdjustmentLine) NONULL DELETE;

index 'No' = PARTITION SUM 1 ORDER AdjustmentLine l BY adjustment(l) IN id MATERIALIZED CHARWIDTH 3;

product 'Product' = DATA Product (AdjustmentLine);
nameProduct 'Product' (AdjustmentLine l) = name(product(l));
idBarCodeProduct 'Barcode' (AdjustmentLine l) = idBarCode(product(l));
idProduct 'Code' (AdjustmentLine l) = id(product(l));

uom (AdjustmentLine l) = uom(product(l));
nameUom 'UOM name' (AdjustmentLine l) = name(uom(l));

location 'Storage' = DATA Location (AdjustmentLine);
nameLocation 'Storage' (AdjustmentLine l) = canonicalName(location(l));

WHEN LOCAL SETCHANGED(location(adjustment(AdjustmentLine l))) AND NOT location(l) DO location(l) <- location(adjustment(l));

CONSTRAINT location(AdjustmentLine l) AND NOT level(location(l), location(adjustment(l))) CHECKED BY location[AdjustmentLine]
    MESSAGE 'The inventory line storage location is not a descendant of the document storage location';

lastAdjustmentLine (Adjustment a, Product p, Location l) = 
    GROUP LAST AdjustmentLine al ORDER al BY adjustment(al), product(al), location(al);

theoreticalQuantity 'Theoretical quantity' = DATA NUMERIC[16,3] (AdjustmentLine);

fillTheoreticalQuantity ABSTRACT LIST (AdjustmentLine);
fillTheoreticalQuantity(AdjustmentLine l) + {
    theoreticalQuantity(l) <- prevOnHandB(location(l), product(l), dateTime(adjustment(l)));
}
WHEN LOCAL (SETCHANGED (location(AdjustmentLine l)) OR SETCHANGED(product(l))) 
           AND NOT CHANGED(theoreticalQuantity(l)) DO
    fillTheoreticalQuantity(l); 

// line properties
nameStatus 'Status' (AdjustmentLine l) = nameStatus(adjustment(l)) IN id;
dateTime 'Date' (AdjustmentLine l) = dateTime(adjustment(l)) IN id;
number 'Room' (AdjustmentLine l) = number(adjustment(l)) IN id;

edit (AdjustmentLine l) + { edit(adjustment(l)); } 

FORM adjustment 'Inventory'
    OBJECTS a = Adjustment PANEL 
    PROPERTIES(a) READONLYIF readonly(a)
                  dateTime, number, 
                  nameLocation, nameType, nameCategory SHOWIF type(a) = AdjustmentType.category
    PROPERTIES(a) note 
    
    OBJECTS l = AdjustmentLine
    PROPERTIES(l) READONLYIF readonly(a) 
                  index READONLY, 
                  nameProduct, nameUom, idBarCodeProduct, idProduct,
                  nameLocation, 
                  theoreticalQuantity,
                  NEW, DELETE
    FILTERS adjustment(l) = a
    
    EDIT Adjustment OBJECT a
;

DESIGN adjustment {
    caption = (CONCAT ' ', 'Inventory', 'No' + number(a), 'from ' + dateTime(a));
    OBJECTS {
        NEW header {
            NEW headerCenter {
                alignment = STRETCH;
                type = CONTAINERH;
                NEW headerLeft {
                    MOVE PROPERTY(dateTime(a));
                    MOVE PROPERTY(number(a));
                }
                NEW headerRight {
                    MOVE PROPERTY(nameLocation(a))  { notNull = TRUE; }
                    MOVE PROPERTY(nameType(a)) { notNull = TRUE; }           
                    MOVE PROPERTY(nameCategory(a)) { notNull = TRUE; }           
                }
            }
            NEW headerBottom {
                alignment = STRETCH;
                MOVE PROPERTY(note(a));           
            }
        }
        NEW details {
            fill = 1;
            type = TABBED;
            NEW lines {
                caption = 'Strings';
                type = SPLITH;
                MOVE BOX(l);
                NEW linesTab {
                    fill = 0.3;
                    type = TABBED;
                }
            }
        }
    }
}

@defineDocHistory(adjustment, a, product, theoreticalQuantity);

FORM adjustments 'Inventories'
    OBJECTS a = Adjustment
    PROPERTIES(a) READONLY dateTime, number, nameType, nameLocation, nameCategory, note
    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE 
    
    LIST Adjustment OBJECT a
;

@defineDocStatusForm(adjustment, a);
@defineDocLinesCount(adjustment, a);
@defineDocLocationAccess(adjustment, a);

@defineDateFilterForm(adjustments, a);

NAVIGATOR {
    operations {
        NEW adjustments;
    }
}

// fill
fill 'Fill in' (Adjustment a) {
    FOR adjustment(AdjustmentLine l) = a DO
        fillTheoreticalQuantity(l);

    FOR (level(Location loc, location(a)) AND onHand(loc, Product p)) AND 
        (level(category(p), category(a)) OR NOT type(a) = AdjustmentType.category) AND 
        NOT type(a) = AdjustmentType.manual AND NOT lastAdjustmentLine(a, p, loc) ORDER name(p), p DO NEW l = AdjustmentLine {
            adjustment(l) <- a;
            product(l) <- p;
            location(l) <- loc;
    }     
}

EXTEND FORM adjustment
    PROPERTIES(a) fill SHOWIF location(a) AND NOT readonly(a)
;

DESIGN adjustment {
    secondaryActions {
        MOVE PROPERTY(fill(a));
    }
}