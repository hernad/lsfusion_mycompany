MODULE AdjustmentList;

REQUIRE AdjustmentInProgress;

NAMESPACE Inventory;

useList 'По описям' = DATA BOOLEAN (Adjustment);

EXTEND FORM adjustment
    PROPERTIES(a) useList READONLYIF readonly(a)
;

DESIGN adjustment {
    headerLeft {
        MOVE PROPERTY(useList(a));
    }
}

CLASS AdjustmentList 'Опись';

adjustment 'Inventory' = DATA Adjustment (AdjustmentList) NONULL DELETE INDEXED;

@defineNumber(adjustmentList, 'Descriptions', 'WT');
note 'Note' = DATA ISTRING (AdjustmentList) CHARWIDTH 30;

readonly (AdjustmentList l) = l IS AdjustmentList AND NOT status(adjustment(l)) = AdjustmentStatus.inProgress;
location (AdjustmentList l) = location(adjustment(l));  

// lines
CLASS AdjustmentListLine 'Inventory line';

adjustmentList = DATA AdjustmentList (AdjustmentListLine) NONULL DELETE INDEXED;

countLines 'Number of lines' (AdjustmentList a) = GROUP SUM 1 IF adjustmentList(AdjustmentListLine l) = a MATERIALIZED;
index 'No' = PARTITION SUM 1 ORDER AdjustmentListLine l BY adjustmentList(l) IN id MATERIALIZED CHARWIDTH 3;

product 'Product' = DATA Product (AdjustmentListLine);
nameProduct 'Product' (AdjustmentListLine l) = name(product(l));
idBarCodeProduct 'Barcode' (AdjustmentListLine l) = idBarCode(product(l));
idProduct 'Code' (AdjustmentListLine l) = id(product(l));

uom (AdjustmentListLine l) = uom(product(l));
nameUom 'UOM name' (AdjustmentListLine l) = name(uom(l));

location 'Storage' = DATA Location (AdjustmentListLine);
nameLocation 'Storage' (AdjustmentListLine l) = canonicalName(location(l));

WHEN LOCAL SETCHANGED(location(adjustmentList(AdjustmentListLine l))) AND NOT location(l) DO location(l) <- location(adjustmentList(l));

CONSTRAINT location(AdjustmentListLine l) AND NOT level(location(l), location(adjustmentList(l))) CHECKED BY location[AdjustmentListLine]
    MESSAGE 'The inventory line storage location is not a descendant of the document storage location';

lastAdjustmentListLine (AdjustmentList a, Product p, Location l) = 
    GROUP LAST AdjustmentListLine al ORDER al BY adjustmentList(al), product(al), location(al);

realQuantity 'Actual Qty' = DATA NUMERIC[16,3] (AdjustmentListLine);
realQuantity 'Actual Qty' (AdjustmentList a) = GROUP SUM realQuantity(AdjustmentListLine l) IF adjustmentList(l) = a MATERIALIZED;

// line properties
adjustment(AdjustmentListLine l) = adjustment(adjustmentList(l));
number 'Room' (AdjustmentListLine l) = number(adjustmentList(l));
note 'Note' (AdjustmentListLine l) = note(adjustmentList(l));

// edit
FORM adjustmentList 'Опись'
    OBJECTS a = AdjustmentList PANEL
    PROPERTIES(a) READONLYIF readonly(a) number, note
    
    OBJECTS l = AdjustmentListLine
    PROPERTIES(l) READONLYIF readonly(a) 
                  index READONLY, 
                  nameProduct, nameUom, idBarCodeProduct, idProduct,
                  nameLocation, 
                  realQuantity,
                  NEW, DELETE
    FILTERS adjustmentList(l) = a
    
    EDIT AdjustmentList OBJECT a
;

DESIGN adjustmentList {
    caption = (CONCAT ' ', 'Опись', 'No' + number(a), ' (' + note(a) + ')');
}

// list
newList 'Add to' (Adjustment a) {
    NEWSESSION {
        NEW al = AdjustmentList {
            adjustment(al) <- a;
            SHOW adjustmentList OBJECTS a = al DOCKED;  
        }
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

edit (AdjustmentListLine l) + { edit(adjustmentList(l)); }

EXTEND FORM adjustment
    OBJECTS al = AdjustmentList
    PROPERTIES(al) READONLY number, note, countLines, realQuantity
    
    PROPERTIES(a) newList DRAW al TOOLBAR READONLYIF NOT PREV(a IS Adjustment) OR NOT status(a) = AdjustmentStatus.inProgress 
    PROPERTIES(al) EDIT NEWSESSION, DELETE READONLYIF NOT status(a) = AdjustmentStatus.inProgress
    
    OBJECTS all = AdjustmentListLine
    PROPERTIES(all) READONLY number, note, realQuantity
    PROPERTIES(all) EDIT
    FILTERS adjustment(all) = a,
            product(all) = product(l)
;

DESIGN adjustment {
    details {
        MOVE BOX(al) {
            showIf = useList(a);
            caption = 'Descriptions';
        }
        linesTab {
            showIf = useList(a);
            MOVE BOX(all);
        }
    }
}

// change quantity
aggregateRealQuantity(AdjustmentLine l) += useList(adjustment(l));

listRealQuantity (Adjustment, Product, Location) = 
    GROUP SUM realQuantity(AdjustmentListLine l) BY adjustment(adjustmentList(l)), product(l), location(l);
    
WHEN SETCHANGED(listRealQuantity(Adjustment a, Product p, Location l)) AND useList(a) AND NOT lastAdjustmentLine(a, p, l) DO
    NEW al = AdjustmentLine {
        adjustment(al) <- a;
        product(al) <- p;
        location(al) <- l;
        realQuantity(al) <- listRealQuantity(a, p, l);
    } 

WHEN CHANGED(listRealQuantity(Adjustment a, Product p, Location l)) AND useList(a) AND AdjustmentLine al = lastAdjustmentLine(a, p, l) DO
    realQuantity(al) <- listRealQuantity(a, p, l);