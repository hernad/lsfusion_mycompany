MODULE SalesOrder;

REQUIRE Time, MetaNumerator, Employee, Company, DateUtils,
        MetaTax, TaxItem, BarCode, LocationEmployee,
        SalesSettings, PartnerSales, ItemSales, SalesOrderType,
        PaymentTermsSales, SalesPricelistValue, Doc;  

NAMESPACE Sales;

CLASS Order 'Purchase Order';

@defineDocStatus(order, 'Sales order');

// type
type 'Type' = DATA OrderType (Order) NONULL;
nameType 'Type' (Order s) = name(type(s));

WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(type(o)) DO type(o) <- defaultOrderType(); 

dateTime 'Date' = DATA DATETIME (Order);
dateTime(Order o) <- currentDateTime() WHEN SET(o IS Order);
@defineDateTimeAggregation(Order);

@defineNumberType(order);

numberDate 'Description' (Order o) = number(o) + ' from ' + dateTime(o) IN id;

// customer
customer 'Customer' = DATA Partner (Order) NONULL;
nameCustomer 'Customer' (Order o) = name(customer(o));

CONSTRAINT customer(Order o) AND NOT isCustomer(customer(o))
                CHECKED BY customer[Order]
                MESSAGE 'The Partner of the Sales order must be the Customer';

addressCustomer 'Recipient\'s address' (Order o) = csvAddress(customer(o));

// Quotation
validity 'Validity' = DATA DATETIME (Order);

// Invoicing information
paymentTerms = DATA PaymentTerm (Order);
namePaymentTerms 'Terms of payment' (Order o)= name(paymentTerms(o));

WHEN LOCAL CHANGED(customer(Order o)) AND NOT CHANGED(paymentTerms(o)) DO paymentTerms(o) <- customerPaymentTerms(customer(o)); 

// company
company 'Company' = DATA Company (Order) NONULL;
nameCompany 'Company' (Order o) = name(company(o));
WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(company(o)) DO company(o) <- defaultCompany();

// Shipping information
scheduledDateTime 'Delivery time' = DATA DATETIME (Order);
scheduledDateTime(Order o) <- currentDateTime() WHEN SET(o IS Order);

scheduledDate 'Delivery date' (Order o) = DATE(scheduledDateTime(o));

deliveryAddress 'Delivery address' = DATA STRING (Order);
WHEN LOCAL CHANGED(customer(Order o)) DO deliveryAddress(o) <- addressCustomer(o);

location = DATA Location (Order) PREREAD;
nameLocation 'Storage' (Order o) = name(location(o));

// Sales information
representative 'Our representative' = DATA Employee (Order);
nameRepresentative 'Our representative' (Order o)= MasterData.name(representative(o));

representative(Order o) <- currentUser() IF currentUser() IS Employee WHEN SET(o IS Order);

CONSTRAINT representative(Order o) AND NOT legalEntity(representative(o)) = company(o) 
    CHECKED BY representative MESSAGE 'Should be our worker';

customerReference 'Incoming customer number' = DATA STRING[30] (Order);

// Lines
CLASS OrderLine 'Specification';
order =  DATA Order (OrderLine) NONULL DELETE;

index 'No' = PARTITION SUM 1 ORDER OrderLine l BY order(l) IN id MATERIALIZED CHARWIDTH 3;

item = DATA Item (OrderLine) NONULL;
nameItem 'Items' (OrderLine l) = name(item(l));
idBarCodeItem 'Barcode' (OrderLine l) = idBarCode(item(l));
idItem 'Code' (OrderLine l) = id(item(l));
isService 'Service' (OrderLine l) = item(l) IS Service;

CONSTRAINT item(OrderLine l) AND NOT canBeSold(item(l))
            CHECKED BY item[OrderLine] 
            MESSAGE 'The item is not for sale';

description 'Description' = DATA ISTRING (OrderLine) CHARWIDTH 20;

uom (OrderLine l) = uom(item(l));
nameUom 'UOM name' (OrderLine l) = name(uom(l));

quantity 'Number' = DATA NUMERIC[16,3] (OrderLine);

price 'Price' = DATA NUMERIC[10,2] (OrderLine);

defaultPrice = ABSTRACT CASE NUMERIC[10,2] (OrderLine);
WHEN LOCAL SETCHANGED(item(OrderLine l)) AND NOT CHANGED(price(l)) DO price(l) <- defaultPrice(l);

defaultPrice (OrderLine l) += WHEN salesPrice(item(l)) THEN salesPrice(item(l)); 

@defineDocDiscount(order);

@defineTaxCalc(order, o, sales, resultPrice);
taxIncluded (OrderLine l) += taxIncluded(type(order(l)));

WHEN LOCAL CHANGED(item(OrderLine ol)) DO {
    in(ol, Tax t) <- salesIn(item(ol), t); 
}

// Line properties
nameStatus 'Status' (OrderLine l) = nameStatus(order(l));
type (OrderLine l) = type(order(l)); 
dateTime 'Date' (OrderLine l) = dateTime(order(l));
number 'Room' (OrderLine l) = number(order(l));
numberDate 'Description' (OrderLine l) = numberDate(order(l));
nameLocation 'Storage' (OrderLine l) = nameLocation(order(l));
customer (OrderLine l) = customer(order(l));
nameCustomer 'Customer' (OrderLine l) = nameCustomer(order(l));

FORM order 'Purchase Order'
    OBJECTS o = Order PANEL
    PROPERTIES(o) nameType, dateTime, number, nameCustomer, nameCompany, nameLocation,
                  validity,
                  namePaymentTerms, addressCustomer,
                  scheduledDateTime, deliveryAddress, 
                  nameRepresentative, customerReference
    PROPERTIES(o) READONLY untaxedAmount, taxAmount, amount
                 
    OBJECTS l = OrderLine
    PROPERTIES(l) index, nameItem, description, nameUom, idBarCodeItem, idItem, quantity, price, untaxedAmount, taxes ON CHANGE changeTax(l)
    PROPERTIES(l) NEW, DELETE
    FILTERS order(l) = o
    
    EDIT Order OBJECT o    
;      

DESIGN order {
    caption = (CONCAT ' ', 'Purchase Order', 'No' + number(o), 'from ' + dateTime(o));
    OBJECTS {
        NEW header {
            alignment = STRETCH;   
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(o)) { notNull = TRUE; };
                MOVE PROPERTY(dateTime(o));
                MOVE PROPERTY(number(o));
            }
            NEW headerRight {
                MOVE PROPERTY(nameCustomer(o)) { notNull = TRUE; } 
                MOVE PROPERTY(nameCompany(o)) { notNull = TRUE; }
                MOVE PROPERTY(nameLocation(o));               
            }    
            NEW relatedDoc {
                type = TABBED;
                fill = 1;
            }                                 
        }
        NEW details {
            fill = 7;
            type = TABBED;
            MOVE BOX(l) {
                PROPERTY(nameItem(l)) { notNull = TRUE; }
            }
            NEW otherInformation {
                caption = 'other information';
                type = COLUMNS;
                columns = 2;
                NEW quotation {
                    caption = 'Request for proposals';
                    alignment = STRETCH;
                    MOVE PROPERTY(validity(o));
                }
                NEW invoicing {
                    caption = 'Calculations';
                    alignment = STRETCH;
                    MOVE PROPERTY(namePaymentTerms(o));                         
                    MOVE PROPERTY(addressCustomer(o));
                }
                NEW shippingInformation {
                    caption = 'Supply';
                    alignment = STRETCH;
                    MOVE PROPERTY(scheduledDateTime(o));
                    MOVE PROPERTY(deliveryAddress(o));
                }
                NEW salesInformation {
                    caption = 'Others';
                    alignment = STRETCH;
                    MOVE PROPERTY(nameRepresentative(o));                                       
                    MOVE PROPERTY(customerReference(o));               
                }
            }            
        }
        NEW footer {
            align = END;
            type = CONTAINERH; 
            NEW total {
                caption = 'Total';
                type = CONTAINERH;
                MOVE PROPERTY(untaxedAmount(o));
                MOVE PROPERTY(taxAmount(o));
                MOVE PROPERTY(amount(o));                     
            }
        }
    }            
}

@defineDocHistory(order, o, item, quantity);
@defineDocDiscountForm(order);

FORM orders 'Sales orders'
     OBJECTS o = Order
     PROPERTIES(o) READONLY nameType, dateTime, number, nameCustomer,
                            validity,
                            namePaymentTerms, addressCustomer,
                            scheduledDateTime, deliveryAddress, nameLocation, 
                            nameRepresentative, customerReference,
                            untaxedAmount, taxAmount, amount
                            
     PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
;

@defineDocStatusForm(order, o);
@defineDocLinesCount(order, o);
@defineDocLocationAccess(order, o);
@defineDateFilterForm(orders, o);

NAVIGATOR {
    operations {
        NEW orders FIRST;    
    }
}

copy 'Copy' (Order o)  { 
    NEWSESSION {
        NEW no = Order {
            type(no) <- type(o);
            customer(no) <- customer(o);
            paymentTerms(no) <- paymentTerms(o);
            company(no) <- company(o);
            location(no) <- location(o);
            representative(no) <- representative(o); 
            FOR order(OrderLine l) = o INLINE NEW nl = OrderLine DO {
                order(nl) <- no;
                item(nl) <- item(l);
                description(nl) <- description(l);
                
                quantity(nl) <- quantity(l);
                
                price(nl) <- price(l);
            }
            SHOW order OBJECTS o = no DOCKED;
        }
    }
}

EXTEND FORM order PROPERTIES copy(o);

DESIGN order {
    secondaryActions {
        MOVE PROPERTY(copy(o));
    }
}