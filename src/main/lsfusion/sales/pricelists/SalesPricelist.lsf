MODULE SalesPricelist;

REQUIRE SalesPricelistType, Item, Partner, ItemSales, PartnerSales, TaxItem, SalesSettings, SalesPriceType, CostLedger, Doc;

NAMESPACE Sales; 

CLASS Pricelist 'Price List';

type 'Type' = DATA PricelistType (Pricelist);
nameType 'Type' (Pricelist p) = name(type(p));

WHEN LOCAL SET(Pricelist p IS Pricelist) AND NOT CHANGED(type(p)) DO type(p) <- defaultPricelistType();

@defineDocStatus(pricelist, 'прайс-листа');

startDateTime 'Start of action' = DATA DATETIME (Pricelist) NONULL;
startDateTime(Pricelist l) <- currentDateTime() WHEN SET(l IS Pricelist);

endDateTime 'End of action' = DATA DATETIME (Pricelist);

@defineNumberType(pricelist);

numberDate 'Description' (Pricelist p) = number(p) + ' from ' + startDateTime(p) IN id;

note 'Note' = DATA STRING[50] (Pricelist);

// price types
editIn 'Change prices' = DATA BOOLEAN (Pricelist, PriceType);

priceListTypes 'Types of prices' (Pricelist pricelist) = 
    GROUP CONCAT name(PriceType pricelistType) IF editIn(pricelist, pricelistType) , ', '
          ORDER pricelistType CHARWIDTH 10 MATERIALIZED;

WHEN LOCAL CHANGED (type(Pricelist pl)) DO editIn(pl, PriceType pt) <- in(type(pl), pt);

FORM chooseTypes 'Selection of price types'
    OBJECTS pr = Pricelist PANEL 
    
    OBJECTS t = PriceType
    PROPERTIES(t) READONLY name 
    PROPERTIES(pr, t) editIn[Pricelist,PriceType]
;

// lines
CLASS PricelistLine 'Items';

pricelist 'Price List' = DATA Pricelist (PricelistLine) NONULL DELETE;

index 'No' = PARTITION SUM 1 ORDER PricelistLine l BY pricelist(l) IN id MATERIALIZED CHARWIDTH 3;

item 'Items' = DATA Item (PricelistLine);
nameItem 'Items' (PricelistLine prl) = name(item(prl));
idBarCodeItem 'Barcode' (PricelistLine l) = idBarCode(item(l));
idItem 'Code' (PricelistLine l) = id(item(l));
nameSalesTax 'Taxes' (PricelistLine l) = nameSalesTax(item(l));

uom (PricelistLine l) = uom(item(l));
nameUom 'UOM name' (PricelistLine l) = name(uom(l)); 

cost 'Cost price' = DATA NUMERIC[14,2] (PricelistLine);
WHEN LOCAL SETCHANGED(item(PricelistLine l)) AND NOT CHANGED(cost(l)) DO cost(l) <- overCost(item(l), startDateTime(pricelist(l)));

markup 'Surcharge' = DATA NUMERIC[10,2] (PricelistLine, PriceType);
price 'Price' = DATA NUMERIC[10,2] (PricelistLine, PriceType);

CONSTRAINT DROPPED(PriceType t IS PriceType) AND PREV(price(PricelistLine l, t))
    MESSAGE 'It is forbidden to delete the types of prices for which there are prices';

editIn (PricelistLine pl, PriceType priceType) = editIn(pricelist(pl), priceType);

// events
basePriceType (PricelistLine l, PriceType t) = basePriceType(type(pricelist(l)), t); 
basePrice (PricelistLine l, PriceType t) = 
    IF basePriceType(l, t) THEN price(l, basePriceType(l, t)) ELSE (cost(l) IF editIn(l, t));

taxCoeff (PricelistLine l, PriceType t) = 
    (100.0 + salesTax(item(l))) / 100.0 IF taxIncluded(t) AND NOT taxIncluded(basePriceType(l, t));
    
noTaxPrice (PricelistLine l, PriceType t) = 
    price(l, t) / (OVERRIDE taxCoeff(l, t), 1.0);

WHEN LOCAL (SETCHANGED(basePrice(PricelistLine l, PriceType t)) OR SETCHANGED(price(l, t))) 
            AND editIn(l, t) AND NOT CHANGED(markup(l, t)) DO
    markup(l, t) <- round2((noTaxPrice(l, t) * 100.0 / basePrice(l, t)) - 100.0);

calcPrice(PricelistLine l, PriceType t) = 
    NUMERIC[10,2](basePrice(l, t) * 
                  (markup(l, t) + 100.0) / 100.0 * 
                  (OVERRIDE taxCoeff(l, t), 1.0));

changeMarkup (PricelistLine l, PriceType t) {
    INPUT val = markup(l, t) CHANGE DO {
        price(l, t) <- calcPrice(l, t);
    }
}

// Line properties
nameType 'Type' (PricelistLine l) = nameType(pricelist(l));
nameStatus 'Status' (PricelistLine l) = nameStatus(pricelist(l));
number 'Room' (PricelistLine prl) = number(pricelist(prl));
numberDate 'Description' (PricelistLine l) = numberDate(pricelist(l));
startDateTime 'Start of action' (PricelistLine prl) = startDateTime(pricelist(prl));
endDateTime 'End of action' (PricelistLine prl) = endDateTime(pricelist(prl));
note 'Note' (PricelistLine prl) = note(pricelist(prl));

FORM pricelist 'Price List'
    OBJECTS p = Pricelist PANEL
    PROPERTIES(p) nameType, number, startDateTime, endDateTime, note,
                  priceListTypes ON CHANGE { SHOW chooseTypes OBJECTS pr = p; }

    OBJECTS t = PriceType
    FILTERS editIn(p, t) 
   
    OBJECTS l = PricelistLine
    PROPERTIES(l) index READONLY, nameItem, nameUom, idBarCodeItem, idItem, nameSalesTax, cost SHOWIF showCost(type(p)) READONLY
    PROPERTIES    markup(l, t) COLUMNS 'p' (t) HEADER name(t) + ', %' SHOWIF showMarkup(type(p), t) ON CHANGE changeMarkup(l, t)
    PROPERTIES    price(l, t) COLUMNS 'p' (t) HEADER name(t) 
    PROPERTIES(l) NEW, DELETE 
    FILTERS pricelist(l) = p 

    EDIT Pricelist OBJECT p
;

DESIGN pricelist {
    caption = (CONCAT ' ', 'Price List', 'No' + number(p), 'from ' + startDateTime(p));
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            NEW params {
                NEW title {
                    type = CONTAINERH;
                    MOVE PROPERTY(nameType(p));
                    MOVE PROPERTY(number(p));
                }
                NEW period {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    MOVE PROPERTY(startDateTime(p)) { caption = 'Действует с '; }
                    MOVE PROPERTY(endDateTime(p)) { caption = 'by '; }
                }
                MOVE PROPERTY(priceListTypes(p)); 
                MOVE PROPERTY(note(p)); 
            }
        }
        NEW details {
            fill = 1;
            type = TABBED;
            MOVE BOX(l) {
                PROPERTY(markup(l, t)) { background = RGB(212,242,252); }
                PROPERTY(price(l, t)) { background = RGB(198,230,247); }
            }
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

FORM pricelists 'Price lists'
    OBJECTS p = Pricelist
    PROPERTIES(p) READONLY nameType, startDateTime, endDateTime, number, note, priceListTypes
    PROPERTIES(p) NEWSESSION NEW, EDIT ,DELETE
    
    LIST Pricelist OBJECT p
;

@defineDocStatusForm(pricelist, p);
@defineDocLinesCount(pricelist, p);

NAVIGATOR {
    operations {
        NEW pricelists;    
    }
}

// copy
copy 'Copy' (Pricelist pl) {
    NEWSESSION {
        NEW p = Pricelist {
            type(p) <- type(pl);
            startDateTime(p) <- startDateTime(pl);
            endDateTime(p) <- endDateTime(pl);
            note(p) <- note(pl);
            editIn(p, PriceType t) <- editIn(pl, t);
            FOR pricelist(PricelistLine l)  = pl DO NEW nl = PricelistLine {
                pricelist(nl) <- p;
                item(nl) <- item(l);
                price(nl, PriceType t) <- price(l, t);
            }
            SHOW pricelist OBJECTS p = p;
        }
    }
}

EXTEND FORM pricelist
    PROPERTIES(p) copy 
;

DESIGN pricelist {
    secondaryActions {
        MOVE PROPERTY(copy(p)); 
    }
}